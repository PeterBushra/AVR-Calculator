
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  000017a8  0000183c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ae  008000a4  008000a4  00001880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c18  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d54  00000000  00000000  000036ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000152e  00000000  00000000  00004440  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00005970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a6  00000000  00000000  00005d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001189  00000000  00000000  0000640a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00007593  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 35       	cpi	r26, 0x52	; 82
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <main>
      8a:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ResetData>:
double Final_arr[NumOfDigit]={0};
double Result = 0 , data = 0;
static sint8 contcatnate_counter=0;

void ResetData(){
	LCD_write_cmd_char(0x01,0);
      92:	60 e0       	ldi	r22, 0x00	; 0
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_cmd_char(0x80,0);
      9a:	60 e0       	ldi	r22, 0x00	; 0
      9c:	80 e8       	ldi	r24, 0x80	; 128
      9e:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	data = 0 ;
      a2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <data>
      a6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <data+0x1>
      aa:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <data+0x2>
      ae:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <data+0x3>
	DigitCounter = 0 ;
      b2:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <DigitCounter>
	Result = 0;
      b6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <Result>
      ba:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <Result+0x1>
      be:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Result+0x2>
      c2:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <Result+0x3>
	contcatnate_counter=0;
      c6:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end>
	Flag = Start;
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Flag>
      d0:	08 95       	ret

000000d2 <GetData>:
}
void GetData()
{
      d2:	cf 92       	push	r12
      d4:	df 92       	push	r13
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	cf 93       	push	r28
	data = KeyPad_read();
      dc:	0e 94 97 06 	call	0xd2e	; 0xd2e <KeyPad_read>
      e0:	c8 2f       	mov	r28, r24
      e2:	68 2f       	mov	r22, r24
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
      ee:	6b 01       	movw	r12, r22
      f0:	7c 01       	movw	r14, r24
      f2:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <data>
      f6:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <data+0x1>
      fa:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <data+0x2>
      fe:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <data+0x3>
	if (data)//data!=0xff
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	a9 01       	movw	r20, r18
     108:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     10c:	88 23       	and	r24, r24
     10e:	09 f4       	brne	.+2      	; 0x112 <GetData+0x40>
     110:	44 c1       	rjmp	.+648    	; 0x39a <GetData+0x2c8>
	{
		if(data == '=')
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	44 e7       	ldi	r20, 0x74	; 116
     118:	52 e4       	ldi	r21, 0x42	; 66
     11a:	c7 01       	movw	r24, r14
     11c:	b6 01       	movw	r22, r12
     11e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     122:	81 11       	cpse	r24, r1
     124:	2d c0       	rjmp	.+90     	; 0x180 <GetData+0xae>
		{
			
			Digit[DigitCounter]= data ; //Store '='
     126:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	ee 0f       	add	r30, r30
     12e:	ff 1f       	adc	r31, r31
     130:	ee 0f       	add	r30, r30
     132:	ff 1f       	adc	r31, r31
     134:	e1 50       	subi	r30, 0x01	; 1
     136:	ff 4f       	sbci	r31, 0xFF	; 255
     138:	8c 2f       	mov	r24, r28
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b0 e0       	ldi	r27, 0x00	; 0
     140:	80 83       	st	Z, r24
     142:	91 83       	std	Z+1, r25	; 0x01
     144:	a2 83       	std	Z+2, r26	; 0x02
     146:	b3 83       	std	Z+3, r27	; 0x03
			LCD_write_cmd_char(Digit[DigitCounter],1);
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	8c 2f       	mov	r24, r28
     14c:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
			DigitCounter++;
     150:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     154:	ef 5f       	subi	r30, 0xFF	; 255
     156:	e0 93 fe 00 	sts	0x00FE, r30	; 0x8000fe <DigitCounter>
			Digit[DigitCounter]= 63 ; // Store 63 .. To Count Untill Reach To 63
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	ee 0f       	add	r30, r30
     15e:	ff 1f       	adc	r31, r31
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	e1 50       	subi	r30, 0x01	; 1
     166:	ff 4f       	sbci	r31, 0xFF	; 255
     168:	8f e3       	ldi	r24, 0x3F	; 63
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	a0 e0       	ldi	r26, 0x00	; 0
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	80 83       	st	Z, r24
     172:	91 83       	std	Z+1, r25	; 0x01
     174:	a2 83       	std	Z+2, r26	; 0x02
     176:	b3 83       	std	Z+3, r27	; 0x03
			Flag = Analyze;			//	Go To Analyze Function
     178:	82 e0       	ldi	r24, 0x02	; 2
     17a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Flag>
			return;
     17e:	0d c1       	rjmp	.+538    	; 0x39a <GetData+0x2c8>
		}
		else if (IsOp(data) )
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	48 e2       	ldi	r20, 0x28	; 40
     186:	52 e4       	ldi	r21, 0x42	; 66
     188:	c7 01       	movw	r24, r14
     18a:	b6 01       	movw	r22, r12
     18c:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     190:	88 23       	and	r24, r24
     192:	c9 f1       	breq	.+114    	; 0x206 <GetData+0x134>
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	4c e2       	ldi	r20, 0x2C	; 44
     19a:	52 e4       	ldi	r21, 0x42	; 66
     19c:	c7 01       	movw	r24, r14
     19e:	b6 01       	movw	r22, r12
     1a0:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     1a4:	88 23       	and	r24, r24
     1a6:	79 f1       	breq	.+94     	; 0x206 <GetData+0x134>
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	44 e3       	ldi	r20, 0x34	; 52
     1ae:	52 e4       	ldi	r21, 0x42	; 66
     1b0:	c7 01       	movw	r24, r14
     1b2:	b6 01       	movw	r22, r12
     1b4:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     1b8:	88 23       	and	r24, r24
     1ba:	59 f0       	breq	.+22     	; 0x1d2 <GetData+0x100>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	4c e3       	ldi	r20, 0x3C	; 60
     1c2:	52 e4       	ldi	r21, 0x42	; 66
     1c4:	c7 01       	movw	r24, r14
     1c6:	b6 01       	movw	r22, r12
     1c8:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     1cc:	88 23       	and	r24, r24
     1ce:	d9 f0       	breq	.+54     	; 0x206 <GetData+0x134>
     1d0:	3e c0       	rjmp	.+124    	; 0x24e <GetData+0x17c>
		{
			if(data == '-') // To Handle many '-' Such  (5---2)
			{
				if(SignNum_F == false)
     1d2:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <SignNum_F>
     1d6:	81 11       	cpse	r24, r1
     1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <GetData+0x110>
				{SignNum_F=true;}
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <SignNum_F>
     1e0:	04 c0       	rjmp	.+8      	; 0x1ea <GetData+0x118>
				else if(SignNum_F == true)
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	11 f4       	brne	.+4      	; 0x1ea <GetData+0x118>
				{SignNum_F=false;}
     1e6:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <SignNum_F>
				LCD_write_cmd_char('-',1);
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	8d e2       	ldi	r24, 0x2D	; 45
     1ee:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f2:	2f eb       	ldi	r18, 0xBF	; 191
     1f4:	87 e2       	ldi	r24, 0x27	; 39
     1f6:	99 e0       	ldi	r25, 0x09	; 9
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	80 40       	sbci	r24, 0x00	; 0
     1fc:	90 40       	sbci	r25, 0x00	; 0
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <GetData+0x126>
     200:	00 c0       	rjmp	.+0      	; 0x202 <GetData+0x130>
     202:	00 00       	nop
     204:	ca c0       	rjmp	.+404    	; 0x39a <GetData+0x2c8>
				_delay_ms(250);
			}
			else
			{
				Digit[DigitCounter]= data ; //Store Any Op Except '-'
     206:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	e1 50       	subi	r30, 0x01	; 1
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	8c 2f       	mov	r24, r28
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	80 83       	st	Z, r24
     222:	91 83       	std	Z+1, r25	; 0x01
     224:	a2 83       	std	Z+2, r26	; 0x02
     226:	b3 83       	std	Z+3, r27	; 0x03
				LCD_write_cmd_char(Digit[DigitCounter],1);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	8c 2f       	mov	r24, r28
     22c:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
				DigitCounter++;
     230:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <DigitCounter>
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <DigitCounter>
     23a:	2f eb       	ldi	r18, 0xBF	; 191
     23c:	87 e2       	ldi	r24, 0x27	; 39
     23e:	99 e0       	ldi	r25, 0x09	; 9
     240:	21 50       	subi	r18, 0x01	; 1
     242:	80 40       	sbci	r24, 0x00	; 0
     244:	90 40       	sbci	r25, 0x00	; 0
     246:	e1 f7       	brne	.-8      	; 0x240 <GetData+0x16e>
     248:	00 c0       	rjmp	.+0      	; 0x24a <GetData+0x178>
     24a:	00 00       	nop
     24c:	a6 c0       	rjmp	.+332    	; 0x39a <GetData+0x2c8>
				_delay_ms(250);
			}
		}
		else if (data == 'C')
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	46 e8       	ldi	r20, 0x86	; 134
     254:	52 e4       	ldi	r21, 0x42	; 66
     256:	c7 01       	movw	r24, r14
     258:	b6 01       	movw	r22, r12
     25a:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     25e:	81 11       	cpse	r24, r1
     260:	03 c0       	rjmp	.+6      	; 0x268 <GetData+0x196>
		{
			Flag = Reset; // If Press "ON"  > Reset
     262:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Flag>
			return;
     266:	99 c0       	rjmp	.+306    	; 0x39a <GetData+0x2c8>
		}
		else if (data=='0') // To Handling '0' .. To Store & appear On Screen
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	40 e4       	ldi	r20, 0x40	; 64
     26e:	52 e4       	ldi	r21, 0x42	; 66
     270:	c7 01       	movw	r24, r14
     272:	b6 01       	movw	r22, r12
     274:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     278:	81 11       	cpse	r24, r1
     27a:	20 c0       	rjmp	.+64     	; 0x2bc <GetData+0x1ea>
		{
			Digit[DigitCounter]= (data-48) ;
     27c:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ee 0f       	add	r30, r30
     284:	ff 1f       	adc	r31, r31
     286:	ee 0f       	add	r30, r30
     288:	ff 1f       	adc	r31, r31
     28a:	e1 50       	subi	r30, 0x01	; 1
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	10 82       	st	Z, r1
     290:	11 82       	std	Z+1, r1	; 0x01
     292:	12 82       	std	Z+2, r1	; 0x02
     294:	13 82       	std	Z+3, r1	; 0x03
			LCD_write_cmd_char('0',1);
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	80 e3       	ldi	r24, 0x30	; 48
     29a:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
			DigitCounter++;
     29e:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <DigitCounter>
     2a2:	8f 5f       	subi	r24, 0xFF	; 255
     2a4:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <DigitCounter>
     2a8:	2f eb       	ldi	r18, 0xBF	; 191
     2aa:	87 e2       	ldi	r24, 0x27	; 39
     2ac:	99 e0       	ldi	r25, 0x09	; 9
     2ae:	21 50       	subi	r18, 0x01	; 1
     2b0:	80 40       	sbci	r24, 0x00	; 0
     2b2:	90 40       	sbci	r25, 0x00	; 0
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <GetData+0x1dc>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <GetData+0x1e6>
     2b8:	00 00       	nop
     2ba:	6f c0       	rjmp	.+222    	; 0x39a <GetData+0x2c8>
			_delay_ms(250);
		}
		else
		{
			if (SignNum_F)
     2bc:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <SignNum_F>
     2c0:	88 23       	and	r24, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <GetData+0x1f4>
     2c4:	47 c0       	rjmp	.+142    	; 0x354 <GetData+0x282>
			{
				Digit[DigitCounter]='-'; //Store '-'
     2c6:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     2ca:	ae 2f       	mov	r26, r30
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	aa 0f       	add	r26, r26
     2d0:	bb 1f       	adc	r27, r27
     2d2:	aa 0f       	add	r26, r26
     2d4:	bb 1f       	adc	r27, r27
     2d6:	a1 50       	subi	r26, 0x01	; 1
     2d8:	bf 4f       	sbci	r27, 0xFF	; 255
     2da:	4d e2       	ldi	r20, 0x2D	; 45
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	4d 93       	st	X+, r20
     2e4:	5d 93       	st	X+, r21
     2e6:	6d 93       	st	X+, r22
     2e8:	7c 93       	st	X, r23
     2ea:	13 97       	sbiw	r26, 0x03	; 3
				DigitCounter++;
     2ec:	c1 e0       	ldi	r28, 0x01	; 1
     2ee:	ce 0f       	add	r28, r30
     2f0:	c0 93 fe 00 	sts	0x00FE, r28	; 0x8000fe <DigitCounter>
				data=-data;			   	// If '-' Is Pressed .. The Number After It Will be Negative
     2f4:	c7 01       	movw	r24, r14
     2f6:	b6 01       	movw	r22, r12
     2f8:	90 58       	subi	r25, 0x80	; 128
     2fa:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <data>
     2fe:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <data+0x1>
     302:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <data+0x2>
     306:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <data+0x3>
				SignNum_F=false;		 //Get Flag To False Again
     30a:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <SignNum_F>
				Digit[DigitCounter]=data;//Store Number After '-'
     30e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixsfsi>
     312:	ec 2f       	mov	r30, r28
     314:	f0 e0       	ldi	r31, 0x00	; 0
     316:	ee 0f       	add	r30, r30
     318:	ff 1f       	adc	r31, r31
     31a:	ee 0f       	add	r30, r30
     31c:	ff 1f       	adc	r31, r31
     31e:	e1 50       	subi	r30, 0x01	; 1
     320:	ff 4f       	sbci	r31, 0xFF	; 255
     322:	60 83       	st	Z, r22
     324:	71 83       	std	Z+1, r23	; 0x01
     326:	82 83       	std	Z+2, r24	; 0x02
     328:	93 83       	std	Z+3, r25	; 0x03
				LCD_write_number(-Digit[DigitCounter]);
     32a:	88 27       	eor	r24, r24
     32c:	99 27       	eor	r25, r25
     32e:	86 1b       	sub	r24, r22
     330:	97 0b       	sbc	r25, r23
     332:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
				DigitCounter++;
     336:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <DigitCounter>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <DigitCounter>
     340:	2f eb       	ldi	r18, 0xBF	; 191
     342:	87 e2       	ldi	r24, 0x27	; 39
     344:	99 e0       	ldi	r25, 0x09	; 9
     346:	21 50       	subi	r18, 0x01	; 1
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	90 40       	sbci	r25, 0x00	; 0
     34c:	e1 f7       	brne	.-8      	; 0x346 <GetData+0x274>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <GetData+0x27e>
     350:	00 00       	nop
     352:	23 c0       	rjmp	.+70     	; 0x39a <GetData+0x2c8>
				_delay_ms(250);
			}
			else
			{
				Digit[DigitCounter]=data; //Store Num;
     354:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <DigitCounter>
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ee 0f       	add	r30, r30
     35c:	ff 1f       	adc	r31, r31
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	e1 50       	subi	r30, 0x01	; 1
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	8c 2f       	mov	r24, r28
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a0 e0       	ldi	r26, 0x00	; 0
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	80 83       	st	Z, r24
     370:	91 83       	std	Z+1, r25	; 0x01
     372:	a2 83       	std	Z+2, r26	; 0x02
     374:	b3 83       	std	Z+3, r27	; 0x03
				LCD_write_number(Digit[DigitCounter]);
     376:	8c 2f       	mov	r24, r28
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
				DigitCounter++;
     37e:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <DigitCounter>
     382:	8f 5f       	subi	r24, 0xFF	; 255
     384:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <DigitCounter>
     388:	2f eb       	ldi	r18, 0xBF	; 191
     38a:	87 e2       	ldi	r24, 0x27	; 39
     38c:	99 e0       	ldi	r25, 0x09	; 9
     38e:	21 50       	subi	r18, 0x01	; 1
     390:	80 40       	sbci	r24, 0x00	; 0
     392:	90 40       	sbci	r25, 0x00	; 0
     394:	e1 f7       	brne	.-8      	; 0x38e <GetData+0x2bc>
     396:	00 c0       	rjmp	.+0      	; 0x398 <GetData+0x2c6>
     398:	00 00       	nop
		}
		
		
	}
	
}
     39a:	cf 91       	pop	r28
     39c:	ff 90       	pop	r15
     39e:	ef 90       	pop	r14
     3a0:	df 90       	pop	r13
     3a2:	cf 90       	pop	r12
     3a4:	08 95       	ret

000003a6 <DisplayResult>:
	return;
	
	
}
void DisplayResult()
{													//LET RESULT = -65.124;
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
	uint32_t integer = fabs(Result);			//integer = |Result| = 65  ? Bocz Integer DataType
     3b6:	c0 90 a9 00 	lds	r12, 0x00A9	; 0x8000a9 <Result>
     3ba:	d0 90 aa 00 	lds	r13, 0x00AA	; 0x8000aa <Result+0x1>
     3be:	e0 90 ab 00 	lds	r14, 0x00AB	; 0x8000ab <Result+0x2>
     3c2:	f0 90 ac 00 	lds	r15, 0x00AC	; 0x8000ac <Result+0x3>
     3c6:	46 01       	movw	r8, r12
     3c8:	57 01       	movw	r10, r14
     3ca:	e8 94       	clt
     3cc:	b7 f8       	bld	r11, 7
	double temp = fabs(Result);					//temp = 65.124				? Bcoz Double DataType Support Float Num
	
	
	temp=temp-integer;		// 65.124 - 65 = .124
     3ce:	c5 01       	movw	r24, r10
     3d0:	b4 01       	movw	r22, r8
     3d2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
     3d6:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	c5 01       	movw	r24, r10
     3e0:	b4 01       	movw	r22, r8
     3e2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__subsf3>
	temp*=10000;			// .124*10000= 12400; // Zero On Right Doesn't Problem After '.'
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e4       	ldi	r19, 0x40	; 64
     3ea:	4c e1       	ldi	r20, 0x1C	; 28
     3ec:	56 e4       	ldi	r21, 0x46	; 70
     3ee:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3>
     3f2:	4b 01       	movw	r8, r22
     3f4:	5c 01       	movw	r10, r24
	if(Result==0) // To Handle Zero Appearing
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     404:	81 11       	cpse	r24, r1
     406:	09 c0       	rjmp	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		LCD_write_cmd_char(0xc0,0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 ec       	ldi	r24, 0xC0	; 192
     40c:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
		LCD_write_cmd_char('0',1);
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	80 e3       	ldi	r24, 0x30	; 48
     414:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     418:	3b c0       	rjmp	.+118    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
	}
	else if (Result<0) // To Handle '-' Appearing ON SCR
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	a9 01       	movw	r20, r18
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     428:	88 23       	and	r24, r24
     42a:	0c f5       	brge	.+66     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
	{LCD_write_cmd_char(0xc0,0);
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	80 ec       	ldi	r24, 0xC0	; 192
     430:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
		LCD_write_cmd_char('-',1);//Print '-'
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	8d e2       	ldi	r24, 0x2D	; 45
     438:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
		Result=-Result; //-65 Will 65 To Appear :)
     43c:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <Result>
     440:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <Result+0x1>
     444:	a0 91 ab 00 	lds	r26, 0x00AB	; 0x8000ab <Result+0x2>
     448:	b0 91 ac 00 	lds	r27, 0x00AC	; 0x8000ac <Result+0x3>
     44c:	bc 01       	movw	r22, r24
     44e:	cd 01       	movw	r24, r26
     450:	90 58       	subi	r25, 0x80	; 128
     452:	60 93 a9 00 	sts	0x00A9, r22	; 0x8000a9 <Result>
     456:	70 93 aa 00 	sts	0x00AA, r23	; 0x8000aa <Result+0x1>
     45a:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Result+0x2>
     45e:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <Result+0x3>
		LCD_write_number(Result); //Appeared ^_^
     462:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
     466:	cb 01       	movw	r24, r22
     468:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
     46c:	11 c0       	rjmp	.+34     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
		
	}
	else
	{
		LCD_write_cmd_char(0xc0,0);
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	80 ec       	ldi	r24, 0xC0	; 192
     472:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
		LCD_write_number(Result);
     476:	60 91 a9 00 	lds	r22, 0x00A9	; 0x8000a9 <Result>
     47a:	70 91 aa 00 	lds	r23, 0x00AA	; 0x8000aa <Result+0x1>
     47e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Result+0x2>
     482:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <Result+0x3>
     486:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
     48a:	cb 01       	movw	r24, r22
     48c:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
	}
	if(temp>0) // Bcoz If There isn't Float Num .. Not Print Float Point .
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	a9 01       	movw	r20, r18
     496:	c5 01       	movw	r24, r10
     498:	b4 01       	movw	r22, r8
     49a:	0e 94 3e 0b 	call	0x167c	; 0x167c <__gesf2>
     49e:	18 16       	cp	r1, r24
     4a0:	8c f4       	brge	.+34     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	{
		LCD_write_cmd_char('.',1);//Print Point Float
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	8e e2       	ldi	r24, 0x2E	; 46
     4a6:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	temp==0?LCD_write_cmd_char('0',1):LCD_write_number(temp);} //Print Temp ex:12400  As I Assumed
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	a9 01       	movw	r20, r18
     4b0:	c5 01       	movw	r24, r10
     4b2:	b4 01       	movw	r22, r8
     4b4:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     4b8:	81 11       	cpse	r24, r1
     4ba:	15 c0       	rjmp	.+42     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	80 e3       	ldi	r24, 0x30	; 48
     4c0:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	while(data != 'C'){data=KeyPad_read();} //Pause Until  Press 'C'
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	46 e8       	ldi	r20, 0x86	; 134
     4ca:	52 e4       	ldi	r21, 0x42	; 66
     4cc:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <data>
     4d0:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <data+0x1>
     4d4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <data+0x2>
     4d8:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <data+0x3>
     4dc:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     4e0:	81 11       	cpse	r24, r1
     4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     4e4:	20 c0       	rjmp	.+64     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
		LCD_write_number(Result);
	}
	if(temp>0) // Bcoz If There isn't Float Num .. Not Print Float Point .
	{
		LCD_write_cmd_char('.',1);//Print Point Float
	temp==0?LCD_write_cmd_char('0',1):LCD_write_number(temp);} //Print Temp ex:12400  As I Assumed
     4e6:	c5 01       	movw	r24, r10
     4e8:	b4 01       	movw	r22, r8
     4ea:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
     4ee:	cb 01       	movw	r24, r22
     4f0:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
     4f4:	e7 cf       	rjmp	.-50     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
	while(data != 'C'){data=KeyPad_read();} //Pause Until  Press 'C'
     4f6:	0e 94 97 06 	call	0xd2e	; 0xd2e <KeyPad_read>
     4fa:	68 2f       	mov	r22, r24
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
     506:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <data>
     50a:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <data+0x1>
     50e:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <data+0x2>
     512:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <data+0x3>
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	46 e8       	ldi	r20, 0x86	; 134
     51c:	52 e4       	ldi	r21, 0x42	; 66
     51e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     522:	81 11       	cpse	r24, r1
     524:	e8 cf       	rjmp	.-48     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
	Flag = Reset; // Reset All
     526:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Flag>
}
     52a:	ff 90       	pop	r15
     52c:	ef 90       	pop	r14
     52e:	df 90       	pop	r13
     530:	cf 90       	pop	r12
     532:	bf 90       	pop	r11
     534:	af 90       	pop	r10
     536:	9f 90       	pop	r9
     538:	8f 90       	pop	r8
     53a:	08 95       	ret

0000053c <Errors>:
void Errors(uint8_t* txt )
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	ec 01       	movw	r28, r24
	LCD_write_cmd_char(0x01,0);
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_txt(txt);
     54a:	ce 01       	movw	r24, r28
     54c:	0e 94 b4 07 	call	0xf68	; 0xf68 <LCD_write_txt>
	
	while(data != 'C'){data=KeyPad_read();}
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	46 e8       	ldi	r20, 0x86	; 134
     556:	52 e4       	ldi	r21, 0x42	; 66
     558:	60 91 a5 00 	lds	r22, 0x00A5	; 0x8000a5 <data>
     55c:	70 91 a6 00 	lds	r23, 0x00A6	; 0x8000a6 <data+0x1>
     560:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <data+0x2>
     564:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <data+0x3>
     568:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     56c:	88 23       	and	r24, r24
     56e:	c1 f0       	breq	.+48     	; 0x5a0 <Errors+0x64>
     570:	0e 94 97 06 	call	0xd2e	; 0xd2e <KeyPad_read>
     574:	68 2f       	mov	r22, r24
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__floatunsisf>
     580:	60 93 a5 00 	sts	0x00A5, r22	; 0x8000a5 <data>
     584:	70 93 a6 00 	sts	0x00A6, r23	; 0x8000a6 <data+0x1>
     588:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <data+0x2>
     58c:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <data+0x3>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	46 e8       	ldi	r20, 0x86	; 134
     596:	52 e4       	ldi	r21, 0x42	; 66
     598:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     59c:	81 11       	cpse	r24, r1
     59e:	e8 cf       	rjmp	.-48     	; 0x570 <Errors+0x34>
	Flag = Reset;
     5a0:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Flag>
	
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <contcatnate>:
sint32 contcatnate(uint8_t pow){//Pow Is Nums Of Digit
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
	sint32 *temp=Digit; //Copy Array To Temp Array
	uint8_t i ,z  ;
	sint8 y=0 ,SignFlag=1;
	sint32 sum =0;
	pow--;
     5ba:	ef ef       	ldi	r30, 0xFF	; 255
     5bc:	e8 0f       	add	r30, r24

	z=contcatnate_counter;
     5be:	f0 90 a4 00 	lds	r15, 0x00A4	; 0x8000a4 <__data_end>
	if (temp[contcatnate_counter] < 0) // If Number Is Negative
     5c2:	2f 2d       	mov	r18, r15
     5c4:	64 e0       	ldi	r22, 0x04	; 4
     5c6:	26 02       	muls	r18, r22
     5c8:	d0 01       	movw	r26, r0
     5ca:	11 24       	eor	r1, r1
     5cc:	a1 50       	subi	r26, 0x01	; 1
     5ce:	bf 4f       	sbci	r27, 0xFF	; 255
     5d0:	4d 91       	ld	r20, X+
     5d2:	5d 91       	ld	r21, X+
     5d4:	6d 91       	ld	r22, X+
     5d6:	7c 91       	ld	r23, X
     5d8:	13 97       	sbiw	r26, 0x03	; 3
     5da:	77 23       	and	r23, r23
     5dc:	74 f4       	brge	.+28     	; 0x5fa <contcatnate+0x50>
	{
		temp[contcatnate_counter]*=-1; // Convert It To Positive
     5de:	70 95       	com	r23
     5e0:	60 95       	com	r22
     5e2:	50 95       	com	r21
     5e4:	41 95       	neg	r20
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	4d 93       	st	X+, r20
     5ee:	5d 93       	st	X+, r21
     5f0:	6d 93       	st	X+, r22
     5f2:	7c 93       	st	X, r23
     5f4:	13 97       	sbiw	r26, 0x03	; 3
		SignFlag=-1;					// And Set Flag
     5f6:	af ef       	ldi	r26, 0xFF	; 255
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <contcatnate+0x52>
	
}
sint32 contcatnate(uint8_t pow){//Pow Is Nums Of Digit
	sint32 *temp=Digit; //Copy Array To Temp Array
	uint8_t i ,z  ;
	sint8 y=0 ,SignFlag=1;
     5fa:	a1 e0       	ldi	r26, 0x01	; 1
	if (temp[contcatnate_counter] < 0) // If Number Is Negative
	{
		temp[contcatnate_counter]*=-1; // Convert It To Positive
		SignFlag=-1;					// And Set Flag
	}
	while(pow > 0)
     5fc:	ee 23       	and	r30, r30
     5fe:	a9 f1       	breq	.+106    	; 0x66a <contcatnate+0xc0>
     600:	82 50       	subi	r24, 0x02	; 2
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	ff 0d       	add	r31, r15
     606:	21 c0       	rjmp	.+66     	; 0x64a <contcatnate+0xa0>
	{	//if {1,3,5}; >> Will Be 100,30,5 And Summing up All To Be 135 ^_^
	
	for (i=0;i<pow;i++) // This Loop To Multiply On Place In .. 1*100 , 3*10 , 5*1
	{
		
		temp[contcatnate_counter]=(temp[contcatnate_counter])*10;
     608:	44 0f       	add	r20, r20
     60a:	55 1f       	adc	r21, r21
     60c:	66 1f       	adc	r22, r22
     60e:	77 1f       	adc	r23, r23
     610:	8a 01       	movw	r16, r20
     612:	9b 01       	movw	r18, r22
     614:	00 0f       	add	r16, r16
     616:	11 1f       	adc	r17, r17
     618:	22 1f       	adc	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	00 0f       	add	r16, r16
     61e:	11 1f       	adc	r17, r17
     620:	22 1f       	adc	r18, r18
     622:	33 1f       	adc	r19, r19
     624:	40 0f       	add	r20, r16
     626:	51 1f       	adc	r21, r17
     628:	62 1f       	adc	r22, r18
     62a:	73 1f       	adc	r23, r19
		SignFlag=-1;					// And Set Flag
	}
	while(pow > 0)
	{	//if {1,3,5}; >> Will Be 100,30,5 And Summing up All To Be 135 ^_^
	
	for (i=0;i<pow;i++) // This Loop To Multiply On Place In .. 1*100 , 3*10 , 5*1
     62c:	9f 5f       	subi	r25, 0xFF	; 255
     62e:	9e 13       	cpse	r25, r30
     630:	eb cf       	rjmp	.-42     	; 0x608 <contcatnate+0x5e>
     632:	48 83       	st	Y, r20
     634:	59 83       	std	Y+1, r21	; 0x01
     636:	6a 83       	std	Y+2, r22	; 0x02
     638:	7b 83       	std	Y+3, r23	; 0x03
	if (temp[contcatnate_counter] < 0) // If Number Is Negative
	{
		temp[contcatnate_counter]*=-1; // Convert It To Positive
		SignFlag=-1;					// And Set Flag
	}
	while(pow > 0)
     63a:	81 11       	cpse	r24, r1
     63c:	03 c0       	rjmp	.+6      	; 0x644 <contcatnate+0x9a>
     63e:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <__data_end>
     642:	13 c0       	rjmp	.+38     	; 0x66a <contcatnate+0xc0>
     644:	e1 50       	subi	r30, 0x01	; 1
     646:	81 50       	subi	r24, 0x01	; 1
     648:	ff 5f       	subi	r31, 0xFF	; 255
     64a:	cf ef       	ldi	r28, 0xFF	; 255
     64c:	cf 0f       	add	r28, r31
	{	//if {1,3,5}; >> Will Be 100,30,5 And Summing up All To Be 135 ^_^
	
	for (i=0;i<pow;i++) // This Loop To Multiply On Place In .. 1*100 , 3*10 , 5*1
     64e:	ee 23       	and	r30, r30
     650:	c9 f3       	breq	.-14     	; 0x644 <contcatnate+0x9a>
	{
		
		temp[contcatnate_counter]=(temp[contcatnate_counter])*10;
     652:	94 e0       	ldi	r25, 0x04	; 4
     654:	c9 02       	muls	r28, r25
     656:	e0 01       	movw	r28, r0
     658:	11 24       	eor	r1, r1
     65a:	c1 50       	subi	r28, 0x01	; 1
     65c:	df 4f       	sbci	r29, 0xFF	; 255
     65e:	48 81       	ld	r20, Y
     660:	59 81       	ldd	r21, Y+1	; 0x01
     662:	6a 81       	ldd	r22, Y+2	; 0x02
     664:	7b 81       	ldd	r23, Y+3	; 0x03
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	cf cf       	rjmp	.-98     	; 0x608 <contcatnate+0x5e>
	}
	contcatnate_counter++;
	pow--;
	
}
y=contcatnate_counter;
     66a:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <__data_end>
while (y>=z) //TO Assume All That I Assumed Above
     66e:	cf 2d       	mov	r28, r15
     670:	d0 e0       	ldi	r29, 0x00	; 0
     672:	29 2f       	mov	r18, r25
     674:	09 2e       	mov	r0, r25
     676:	00 0c       	add	r0, r0
     678:	33 0b       	sbc	r19, r19
     67a:	2c 17       	cp	r18, r28
     67c:	3d 07       	cpc	r19, r29
     67e:	dc f0       	brlt	.+54     	; 0x6b6 <contcatnate+0x10c>
     680:	89 2f       	mov	r24, r25
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	a9 01       	movw	r20, r18
{
	sum+=temp[y];
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	86 02       	muls	r24, r22
     68c:	f0 01       	movw	r30, r0
     68e:	11 24       	eor	r1, r1
     690:	e1 50       	subi	r30, 0x01	; 1
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	c0 80       	ld	r12, Z
     696:	d1 80       	ldd	r13, Z+1	; 0x01
     698:	e2 80       	ldd	r14, Z+2	; 0x02
     69a:	f3 80       	ldd	r15, Z+3	; 0x03
     69c:	2c 0d       	add	r18, r12
     69e:	3d 1d       	adc	r19, r13
     6a0:	4e 1d       	adc	r20, r14
     6a2:	5f 1d       	adc	r21, r15
     6a4:	81 50       	subi	r24, 0x01	; 1
	contcatnate_counter++;
	pow--;
	
}
y=contcatnate_counter;
while (y>=z) //TO Assume All That I Assumed Above
     6a6:	68 2f       	mov	r22, r24
     6a8:	08 2e       	mov	r0, r24
     6aa:	00 0c       	add	r0, r0
     6ac:	77 0b       	sbc	r23, r23
     6ae:	6c 17       	cp	r22, r28
     6b0:	7d 07       	cpc	r23, r29
     6b2:	54 f7       	brge	.-44     	; 0x688 <contcatnate+0xde>
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <contcatnate+0x112>
}
sint32 contcatnate(uint8_t pow){//Pow Is Nums Of Digit
	sint32 *temp=Digit; //Copy Array To Temp Array
	uint8_t i ,z  ;
	sint8 y=0 ,SignFlag=1;
	sint32 sum =0;
     6b6:	20 e0       	ldi	r18, 0x00	; 0
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	a9 01       	movw	r20, r18
while (y>=z) //TO Assume All That I Assumed Above
{
	sum+=temp[y];
	y--;
}
contcatnate_counter+=2; //Jump To New Place In Array To Recive New "Pow" , And Re This Func.
     6bc:	9e 5f       	subi	r25, 0xFE	; 254
     6be:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <__data_end>
return sum*SignFlag;	// If The SignFlag Is Set Above Will Be Return Negative Value
     6c2:	0a 2e       	mov	r0, r26
     6c4:	00 0c       	add	r0, r0
     6c6:	bb 0b       	sbc	r27, r27
     6c8:	0e 94 bf 0b 	call	0x177e	; 0x177e <__mulshisi3>

}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <Analysis>:
		
	}
	
}
void Analysis()
{
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
	uint8_t  Final_arr_counter = 0 ,index =0 , \
	Nums_before_Operand =0 ;
	
	if( IsOp(Digit[0]) && ((Digit[0]!= '-') || (Digit[0]!=Nums))  ) // Get Error If Enter   ex: *2= Or /7=
     6ea:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <Digit>
     6ee:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <Digit+0x1>
     6f2:	a0 91 01 01 	lds	r26, 0x0101	; 0x800101 <Digit+0x2>
     6f6:	b0 91 02 01 	lds	r27, 0x0102	; 0x800102 <Digit+0x3>
     6fa:	ac 01       	movw	r20, r24
     6fc:	bd 01       	movw	r22, r26
     6fe:	4a 52       	subi	r20, 0x2A	; 42
     700:	51 09       	sbc	r21, r1
     702:	61 09       	sbc	r22, r1
     704:	71 09       	sbc	r23, r1
     706:	42 30       	cpi	r20, 0x02	; 2
     708:	51 05       	cpc	r21, r1
     70a:	61 05       	cpc	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	98 f0       	brcs	.+38     	; 0x736 <Analysis+0x58>
     710:	ac 01       	movw	r20, r24
     712:	bd 01       	movw	r22, r26
     714:	4d 7f       	andi	r20, 0xFD	; 253
     716:	4d 32       	cpi	r20, 0x2D	; 45
     718:	51 05       	cpc	r21, r1
     71a:	61 05       	cpc	r22, r1
     71c:	71 05       	cpc	r23, r1
     71e:	59 f0       	breq	.+22     	; 0x736 <Analysis+0x58>
     720:	8d 33       	cpi	r24, 0x3D	; 61
     722:	91 05       	cpc	r25, r1
     724:	a1 05       	cpc	r26, r1
     726:	b1 05       	cpc	r27, r1
     728:	31 f0       	breq	.+12     	; 0x736 <Analysis+0x58>
		Errors((uint8_t*)"Invalid Input");
		Flag = Reset;
		return;
	}
	
	while(Digit[index] != 63) //Get Error If Enter ex: *\41 ;
     72a:	8f 33       	cpi	r24, 0x3F	; 63
     72c:	91 05       	cpc	r25, r1
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	41 f4       	brne	.+16     	; 0x744 <Analysis+0x66>
     734:	ec c0       	rjmp	.+472    	; 0x90e <__stack+0xaf>
	uint8_t  Final_arr_counter = 0 ,index =0 , \
	Nums_before_Operand =0 ;
	
	if( IsOp(Digit[0]) && ((Digit[0]!= '-') || (Digit[0]!=Nums))  ) // Get Error If Enter   ex: *2= Or /7=
	{
		Errors((uint8_t*)"Invalid Input");
     736:	80 e6       	ldi	r24, 0x60	; 96
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 9e 02 	call	0x53c	; 0x53c <Errors>
		Flag = Reset;
     73e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <Flag>
		return;
     742:	e8 c0       	rjmp	.+464    	; 0x914 <__stack+0xb5>
	}
	
	while(Digit[index] != 63) //Get Error If Enter ex: *\41 ;
     744:	c0 e0       	ldi	r28, 0x00	; 0
     746:	d0 e0       	ldi	r29, 0x00	; 0
     748:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(IsOp(Digit[index])&&IsOp(Digit[index+1])){
     74a:	ac 01       	movw	r20, r24
     74c:	bd 01       	movw	r22, r26
     74e:	4a 52       	subi	r20, 0x2A	; 42
     750:	51 09       	sbc	r21, r1
     752:	61 09       	sbc	r22, r1
     754:	71 09       	sbc	r23, r1
     756:	42 30       	cpi	r20, 0x02	; 2
     758:	51 05       	cpc	r21, r1
     75a:	61 05       	cpc	r22, r1
     75c:	71 05       	cpc	r23, r1
     75e:	60 f0       	brcs	.+24     	; 0x778 <Analysis+0x9a>
     760:	ac 01       	movw	r20, r24
     762:	bd 01       	movw	r22, r26
     764:	4d 7f       	andi	r20, 0xFD	; 253
     766:	4d 32       	cpi	r20, 0x2D	; 45
     768:	51 05       	cpc	r21, r1
     76a:	61 05       	cpc	r22, r1
     76c:	71 05       	cpc	r23, r1
     76e:	21 f0       	breq	.+8      	; 0x778 <Analysis+0x9a>
     770:	cd 97       	sbiw	r24, 0x3d	; 61
     772:	a1 05       	cpc	r26, r1
     774:	b1 05       	cpc	r27, r1
     776:	31 f5       	brne	.+76     	; 0x7c4 <Analysis+0xe6>
     778:	fe 01       	movw	r30, r28
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ed 5f       	subi	r30, 0xFD	; 253
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	80 81       	ld	r24, Z
     788:	91 81       	ldd	r25, Z+1	; 0x01
     78a:	a2 81       	ldd	r26, Z+2	; 0x02
     78c:	b3 81       	ldd	r27, Z+3	; 0x03
     78e:	ac 01       	movw	r20, r24
     790:	bd 01       	movw	r22, r26
     792:	4a 52       	subi	r20, 0x2A	; 42
     794:	51 09       	sbc	r21, r1
     796:	61 09       	sbc	r22, r1
     798:	71 09       	sbc	r23, r1
     79a:	42 30       	cpi	r20, 0x02	; 2
     79c:	51 05       	cpc	r21, r1
     79e:	61 05       	cpc	r22, r1
     7a0:	71 05       	cpc	r23, r1
     7a2:	60 f0       	brcs	.+24     	; 0x7bc <Analysis+0xde>
     7a4:	ac 01       	movw	r20, r24
     7a6:	bd 01       	movw	r22, r26
     7a8:	4d 7f       	andi	r20, 0xFD	; 253
     7aa:	4d 32       	cpi	r20, 0x2D	; 45
     7ac:	51 05       	cpc	r21, r1
     7ae:	61 05       	cpc	r22, r1
     7b0:	71 05       	cpc	r23, r1
     7b2:	21 f0       	breq	.+8      	; 0x7bc <Analysis+0xde>
     7b4:	cd 97       	sbiw	r24, 0x3d	; 61
     7b6:	a1 05       	cpc	r26, r1
     7b8:	b1 05       	cpc	r27, r1
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <Analysis+0xe6>
			Errors((uint8_t*)"Syntax Error");
     7bc:	8e e6       	ldi	r24, 0x6E	; 110
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 9e 02 	call	0x53c	; 0x53c <Errors>
		}
		
		if ((Digit[index]=='/')&&(Digit[index+1]==0)) //if Divided  Over Zerooo Get Math Error
     7c4:	fe 01       	movw	r30, r28
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	ee 0f       	add	r30, r30
     7cc:	ff 1f       	adc	r31, r31
     7ce:	e1 50       	subi	r30, 0x01	; 1
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	a2 81       	ldd	r26, Z+2	; 0x02
     7d8:	b3 81       	ldd	r27, Z+3	; 0x03
     7da:	8f 97       	sbiw	r24, 0x2f	; 47
     7dc:	a1 05       	cpc	r26, r1
     7de:	b1 05       	cpc	r27, r1
     7e0:	91 f4       	brne	.+36     	; 0x806 <Analysis+0x128>
     7e2:	cc 0f       	add	r28, r28
     7e4:	dd 1f       	adc	r29, r29
     7e6:	cc 0f       	add	r28, r28
     7e8:	dd 1f       	adc	r29, r29
     7ea:	cd 5f       	subi	r28, 0xFD	; 253
     7ec:	de 4f       	sbci	r29, 0xFE	; 254
     7ee:	88 81       	ld	r24, Y
     7f0:	99 81       	ldd	r25, Y+1	; 0x01
     7f2:	aa 81       	ldd	r26, Y+2	; 0x02
     7f4:	bb 81       	ldd	r27, Y+3	; 0x03
     7f6:	89 2b       	or	r24, r25
     7f8:	8a 2b       	or	r24, r26
     7fa:	8b 2b       	or	r24, r27
     7fc:	21 f4       	brne	.+8      	; 0x806 <Analysis+0x128>
		{
			Errors((uint8_t*)"Math Error");
     7fe:	8b e7       	ldi	r24, 0x7B	; 123
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 9e 02 	call	0x53c	; 0x53c <Errors>
		}
		
		index++;
     806:	1f 5f       	subi	r17, 0xFF	; 255
		Errors((uint8_t*)"Invalid Input");
		Flag = Reset;
		return;
	}
	
	while(Digit[index] != 63) //Get Error If Enter ex: *\41 ;
     808:	c1 2f       	mov	r28, r17
     80a:	d0 e0       	ldi	r29, 0x00	; 0
     80c:	fe 01       	movw	r30, r28
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	ee 0f       	add	r30, r30
     814:	ff 1f       	adc	r31, r31
     816:	e1 50       	subi	r30, 0x01	; 1
     818:	ff 4f       	sbci	r31, 0xFF	; 255
     81a:	80 81       	ld	r24, Z
     81c:	91 81       	ldd	r25, Z+1	; 0x01
     81e:	a2 81       	ldd	r26, Z+2	; 0x02
     820:	b3 81       	ldd	r27, Z+3	; 0x03
     822:	8f 33       	cpi	r24, 0x3F	; 63
     824:	91 05       	cpc	r25, r1
     826:	a1 05       	cpc	r26, r1
     828:	b1 05       	cpc	r27, r1
     82a:	09 f0       	breq	.+2      	; 0x82e <Analysis+0x150>
     82c:	8e cf       	rjmp	.-228    	; 0x74a <Analysis+0x6c>
		
		index++;
	}
	
	index=0;
	while(Digit[index] != 63)//Count Numbers Before Each Operand And contcatnate It .. Ex: {1,3,4,'+',8,9,'='} Will Be {134,'+',89,'='}
     82e:	40 91 ff 00 	lds	r20, 0x00FF	; 0x8000ff <Digit>
     832:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <Digit+0x1>
     836:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <Digit+0x2>
     83a:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <Digit+0x3>
     83e:	4f 33       	cpi	r20, 0x3F	; 63
     840:	51 05       	cpc	r21, r1
     842:	61 05       	cpc	r22, r1
     844:	71 05       	cpc	r23, r1
     846:	09 f4       	brne	.+2      	; 0x84a <Analysis+0x16c>
     848:	62 c0       	rjmp	.+196    	; 0x90e <__stack+0xaf>
     84a:	c0 e0       	ldi	r28, 0x00	; 0
     84c:	d0 e0       	ldi	r29, 0x00	; 0
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	f1 2c       	mov	r15, r1
     852:	e1 2c       	mov	r14, r1
	{
		if(!IsOp(Digit[index]))
     854:	8a 01       	movw	r16, r20
     856:	9b 01       	movw	r18, r22
     858:	0a 52       	subi	r16, 0x2A	; 42
     85a:	11 09       	sbc	r17, r1
     85c:	21 09       	sbc	r18, r1
     85e:	31 09       	sbc	r19, r1
     860:	02 30       	cpi	r16, 0x02	; 2
     862:	11 05       	cpc	r17, r1
     864:	21 05       	cpc	r18, r1
     866:	31 05       	cpc	r19, r1
     868:	78 f0       	brcs	.+30     	; 0x888 <__stack+0x29>
     86a:	8a 01       	movw	r16, r20
     86c:	9b 01       	movw	r18, r22
     86e:	0d 7f       	andi	r16, 0xFD	; 253
     870:	0d 32       	cpi	r16, 0x2D	; 45
     872:	11 05       	cpc	r17, r1
     874:	21 05       	cpc	r18, r1
     876:	31 05       	cpc	r19, r1
     878:	39 f0       	breq	.+14     	; 0x888 <__stack+0x29>
     87a:	4d 33       	cpi	r20, 0x3D	; 61
     87c:	51 05       	cpc	r21, r1
     87e:	61 05       	cpc	r22, r1
     880:	71 05       	cpc	r23, r1
     882:	11 f0       	breq	.+4      	; 0x888 <__stack+0x29>
		{
			Nums_before_Operand++; // Count Numbers ;
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	2f c0       	rjmp	.+94     	; 0x8e6 <__stack+0x87>
			
		}
		
		else if (IsOp(Digit[index])) // If Find Opeartion
		{
			if(Nums_before_Operand > 0) // Check If There is Nums Before Operand
     888:	88 23       	and	r24, r24
     88a:	91 f0       	breq	.+36     	; 0x8b0 <__stack+0x51>
			{
				Final_arr[Final_arr_counter]=contcatnate(Nums_before_Operand); // Send Numbers Of Digits Berfore Operand To contcatnate;
     88c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <contcatnate>
     890:	0e 2d       	mov	r16, r14
     892:	10 e0       	ldi	r17, 0x00	; 0
     894:	00 0f       	add	r16, r16
     896:	11 1f       	adc	r17, r17
     898:	00 0f       	add	r16, r16
     89a:	11 1f       	adc	r17, r17
     89c:	03 55       	subi	r16, 0x53	; 83
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
     8a4:	f8 01       	movw	r30, r16
     8a6:	60 83       	st	Z, r22
     8a8:	71 83       	std	Z+1, r23	; 0x01
     8aa:	82 83       	std	Z+2, r24	; 0x02
     8ac:	93 83       	std	Z+3, r25	; 0x03
				Final_arr_counter++;
     8ae:	e3 94       	inc	r14
				Nums_before_Operand = 0; //Return To Zero
			}
			
			Final_arr[Final_arr_counter]=Digit[index];//Store Operand Form Array Called Digit[] To Final_arr[]
     8b0:	0e 2d       	mov	r16, r14
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	00 0f       	add	r16, r16
     8b6:	11 1f       	adc	r17, r17
     8b8:	00 0f       	add	r16, r16
     8ba:	11 1f       	adc	r17, r17
     8bc:	03 55       	subi	r16, 0x53	; 83
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	cc 0f       	add	r28, r28
     8c2:	dd 1f       	adc	r29, r29
     8c4:	cc 0f       	add	r28, r28
     8c6:	dd 1f       	adc	r29, r29
     8c8:	c1 50       	subi	r28, 0x01	; 1
     8ca:	df 4f       	sbci	r29, 0xFF	; 255
     8cc:	68 81       	ld	r22, Y
     8ce:	79 81       	ldd	r23, Y+1	; 0x01
     8d0:	8a 81       	ldd	r24, Y+2	; 0x02
     8d2:	9b 81       	ldd	r25, Y+3	; 0x03
     8d4:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
     8d8:	f8 01       	movw	r30, r16
     8da:	60 83       	st	Z, r22
     8dc:	71 83       	std	Z+1, r23	; 0x01
     8de:	82 83       	std	Z+2, r24	; 0x02
     8e0:	93 83       	std	Z+3, r25	; 0x03
			Final_arr_counter++;
     8e2:	e3 94       	inc	r14
     8e4:	80 e0       	ldi	r24, 0x00	; 0
			
		}
		index++;
     8e6:	f3 94       	inc	r15
		
		index++;
	}
	
	index=0;
	while(Digit[index] != 63)//Count Numbers Before Each Operand And contcatnate It .. Ex: {1,3,4,'+',8,9,'='} Will Be {134,'+',89,'='}
     8e8:	cf 2d       	mov	r28, r15
     8ea:	d0 e0       	ldi	r29, 0x00	; 0
     8ec:	fe 01       	movw	r30, r28
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	ee 0f       	add	r30, r30
     8f4:	ff 1f       	adc	r31, r31
     8f6:	e1 50       	subi	r30, 0x01	; 1
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	40 81       	ld	r20, Z
     8fc:	51 81       	ldd	r21, Z+1	; 0x01
     8fe:	62 81       	ldd	r22, Z+2	; 0x02
     900:	73 81       	ldd	r23, Z+3	; 0x03
     902:	4f 33       	cpi	r20, 0x3F	; 63
     904:	51 05       	cpc	r21, r1
     906:	61 05       	cpc	r22, r1
     908:	71 05       	cpc	r23, r1
     90a:	09 f0       	breq	.+2      	; 0x90e <__stack+0xaf>
     90c:	a3 cf       	rjmp	.-186    	; 0x854 <Analysis+0x176>
		}
		index++;
	}
	
	
	Flag = calculate;  // Go To Calculation Func.
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Flag>
	
	
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	08 95       	ret

00000922 <delete_node>:
contcatnate_counter+=2; //Jump To New Place In Array To Recive New "Pow" , And Re This Func.
return sum*SignFlag;	// If The SignFlag Is Set Above Will Be Return Negative Value

}
void delete_node(uint8_t node)
{
     922:	1f 93       	push	r17
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	uint8_t temp = (node + 1) ;
     928:	11 e0       	ldi	r17, 0x01	; 1
     92a:	18 0f       	add	r17, r24
	while(Final_arr[(node-1)] != '=')
     92c:	c8 2f       	mov	r28, r24
     92e:	d0 e0       	ldi	r29, 0x00	; 0
     930:	fe 01       	movw	r30, r28
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	ee 0f       	add	r30, r30
     938:	ff 1f       	adc	r31, r31
     93a:	e7 55       	subi	r30, 0x57	; 87
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	44 e7       	ldi	r20, 0x74	; 116
     944:	52 e4       	ldi	r21, 0x42	; 66
     946:	60 81       	ld	r22, Z
     948:	71 81       	ldd	r23, Z+1	; 0x01
     94a:	82 81       	ldd	r24, Z+2	; 0x02
     94c:	93 81       	ldd	r25, Z+3	; 0x03
     94e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     952:	88 23       	and	r24, r24
     954:	61 f1       	breq	.+88     	; 0x9ae <delete_node+0x8c>
	{
		Final_arr[node]=Final_arr[temp];
     956:	21 2f       	mov	r18, r17
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	e3 55       	subi	r30, 0x53	; 83
     966:	ff 4f       	sbci	r31, 0xFF	; 255
     968:	80 81       	ld	r24, Z
     96a:	91 81       	ldd	r25, Z+1	; 0x01
     96c:	a2 81       	ldd	r26, Z+2	; 0x02
     96e:	b3 81       	ldd	r27, Z+3	; 0x03
     970:	cc 0f       	add	r28, r28
     972:	dd 1f       	adc	r29, r29
     974:	cc 0f       	add	r28, r28
     976:	dd 1f       	adc	r29, r29
     978:	c3 55       	subi	r28, 0x53	; 83
     97a:	df 4f       	sbci	r29, 0xFF	; 255
     97c:	88 83       	st	Y, r24
     97e:	99 83       	std	Y+1, r25	; 0x01
     980:	aa 83       	std	Y+2, r26	; 0x02
     982:	bb 83       	std	Y+3, r27	; 0x03
		node++;
		temp++;
     984:	1f 5f       	subi	r17, 0xFF	; 255

}
void delete_node(uint8_t node)
{
	uint8_t temp = (node + 1) ;
	while(Final_arr[(node-1)] != '=')
     986:	e9 01       	movw	r28, r18
     988:	22 0f       	add	r18, r18
     98a:	33 1f       	adc	r19, r19
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	f9 01       	movw	r30, r18
     992:	e7 55       	subi	r30, 0x57	; 87
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	44 e7       	ldi	r20, 0x74	; 116
     99c:	52 e4       	ldi	r21, 0x42	; 66
     99e:	60 81       	ld	r22, Z
     9a0:	71 81       	ldd	r23, Z+1	; 0x01
     9a2:	82 81       	ldd	r24, Z+2	; 0x02
     9a4:	93 81       	ldd	r25, Z+3	; 0x03
     9a6:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     9aa:	81 11       	cpse	r24, r1
     9ac:	d4 cf       	rjmp	.-88     	; 0x956 <delete_node+0x34>
		Final_arr[node]=Final_arr[temp];
		node++;
		temp++;
	}
	
}
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	08 95       	ret

000009b6 <Calculation>:
	Flag = calculate;  // Go To Calculation Func.
	
	
}
void Calculation()
{	sint8 i =0  ;
     9b6:	8f 92       	push	r8
     9b8:	9f 92       	push	r9
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	ff 92       	push	r15
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	c0 e0       	ldi	r28, 0x00	; 0
	while(Final_arr[i] != '=')
     9ce:	0f c0       	rjmp	.+30     	; 0x9ee <Calculation+0x38>
	{
		if (Final_arr[i]=='-')//Delete All '-' In Array Bcoz I Assume It In a Number ;
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	44 e3       	ldi	r20, 0x34	; 52
     9d6:	52 e4       	ldi	r21, 0x42	; 66
     9d8:	c7 01       	movw	r24, r14
     9da:	b6 01       	movw	r22, r12
     9dc:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     9e0:	81 11       	cpse	r24, r1
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <Calculation+0x36>
		{
			delete_node(i);
     9e4:	8c 2f       	mov	r24, r28
     9e6:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			continue;
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <Calculation+0x38>
		}
		i++;
     9ec:	cf 5f       	subi	r28, 0xFF	; 255
	
	
}
void Calculation()
{	sint8 i =0  ;
	while(Final_arr[i] != '=')
     9ee:	24 e0       	ldi	r18, 0x04	; 4
     9f0:	c2 02       	muls	r28, r18
     9f2:	f0 01       	movw	r30, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	e3 55       	subi	r30, 0x53	; 83
     9f8:	ff 4f       	sbci	r31, 0xFF	; 255
     9fa:	c0 80       	ld	r12, Z
     9fc:	d1 80       	ldd	r13, Z+1	; 0x01
     9fe:	e2 80       	ldd	r14, Z+2	; 0x02
     a00:	f3 80       	ldd	r15, Z+3	; 0x03
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	44 e7       	ldi	r20, 0x74	; 116
     a08:	52 e4       	ldi	r21, 0x42	; 66
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     a12:	81 11       	cpse	r24, r1
     a14:	dd cf       	rjmp	.-70     	; 0x9d0 <Calculation+0x1a>
			continue;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     a16:	c0 90 ad 00 	lds	r12, 0x00AD	; 0x8000ad <Final_arr>
     a1a:	d0 90 ae 00 	lds	r13, 0x00AE	; 0x8000ae <Final_arr+0x1>
     a1e:	e0 90 af 00 	lds	r14, 0x00AF	; 0x8000af <Final_arr+0x2>
     a22:	f0 90 b0 00 	lds	r15, 0x00B0	; 0x8000b0 <Final_arr+0x3>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	44 e7       	ldi	r20, 0x74	; 116
     a2c:	52 e4       	ldi	r21, 0x42	; 66
     a2e:	c7 01       	movw	r24, r14
     a30:	b6 01       	movw	r22, r12
     a32:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     a36:	88 23       	and	r24, r24
     a38:	09 f4       	brne	.+2      	; 0xa3c <Calculation+0x86>
     a3a:	43 c1       	rjmp	.+646    	; 0xcc2 <Calculation+0x30c>
     a3c:	00 e0       	ldi	r16, 0x00	; 0
     a3e:	10 e0       	ldi	r17, 0x00	; 0
     a40:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (Final_arr[i]=='*') // Calculate All Multiply Operations As First And Edit The Array With New Value And Delete '*'
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	48 e2       	ldi	r20, 0x28	; 40
     a48:	52 e4       	ldi	r21, 0x42	; 66
     a4a:	c7 01       	movw	r24, r14
     a4c:	b6 01       	movw	r22, r12
     a4e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     a52:	81 11       	cpse	r24, r1
     a54:	22 c0       	rjmp	.+68     	; 0xa9a <Calculation+0xe4>
		{
			Final_arr[i-1]=Final_arr[i-1]*Final_arr[i+1]; //ex: {5,'*',6,'='} Will Be >> {30,'*',6,'='}
     a56:	c8 01       	movw	r24, r16
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	dc 01       	movw	r26, r24
     a62:	a7 55       	subi	r26, 0x57	; 87
     a64:	bf 4f       	sbci	r27, 0xFF	; 255
     a66:	7d 01       	movw	r14, r26
     a68:	fc 01       	movw	r30, r24
     a6a:	ef 54       	subi	r30, 0x4F	; 79
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	2d 91       	ld	r18, X+
     a70:	3d 91       	ld	r19, X+
     a72:	4d 91       	ld	r20, X+
     a74:	5c 91       	ld	r21, X
     a76:	60 81       	ld	r22, Z
     a78:	71 81       	ldd	r23, Z+1	; 0x01
     a7a:	82 81       	ldd	r24, Z+2	; 0x02
     a7c:	93 81       	ldd	r25, Z+3	; 0x03
     a7e:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3>
     a82:	f7 01       	movw	r30, r14
     a84:	60 83       	st	Z, r22
     a86:	71 83       	std	Z+1, r23	; 0x01
     a88:	82 83       	std	Z+2, r24	; 0x02
     a8a:	93 83       	std	Z+3, r25	; 0x03
			delete_node(i);		//delete '*' From Array
     a8c:	8c 2f       	mov	r24, r28
     a8e:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			delete_node(i);		//delete "6"  From Array
     a92:	8c 2f       	mov	r24, r28
     a94:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			//Final_Arr Came {30,'='};
			i=0;
     a98:	c0 e0       	ldi	r28, 0x00	; 0
		}
		i++;
     a9a:	cf 5f       	subi	r28, 0xFF	; 255
			continue;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     a9c:	0c 2f       	mov	r16, r28
     a9e:	0c 2e       	mov	r0, r28
     aa0:	00 0c       	add	r0, r0
     aa2:	11 0b       	sbc	r17, r17
     aa4:	f8 01       	movw	r30, r16
     aa6:	ee 0f       	add	r30, r30
     aa8:	ff 1f       	adc	r31, r31
     aaa:	ee 0f       	add	r30, r30
     aac:	ff 1f       	adc	r31, r31
     aae:	e3 55       	subi	r30, 0x53	; 83
     ab0:	ff 4f       	sbci	r31, 0xFF	; 255
     ab2:	c0 80       	ld	r12, Z
     ab4:	d1 80       	ldd	r13, Z+1	; 0x01
     ab6:	e2 80       	ldd	r14, Z+2	; 0x02
     ab8:	f3 80       	ldd	r15, Z+3	; 0x03
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	44 e7       	ldi	r20, 0x74	; 116
     ac0:	52 e4       	ldi	r21, 0x42	; 66
     ac2:	c7 01       	movw	r24, r14
     ac4:	b6 01       	movw	r22, r12
     ac6:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     aca:	81 11       	cpse	r24, r1
     acc:	ba cf       	rjmp	.-140    	; 0xa42 <Calculation+0x8c>
			i=0;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     ace:	c0 90 ad 00 	lds	r12, 0x00AD	; 0x8000ad <Final_arr>
     ad2:	d0 90 ae 00 	lds	r13, 0x00AE	; 0x8000ae <Final_arr+0x1>
     ad6:	e0 90 af 00 	lds	r14, 0x00AF	; 0x8000af <Final_arr+0x2>
     ada:	f0 90 b0 00 	lds	r15, 0x00B0	; 0x8000b0 <Final_arr+0x3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	44 e7       	ldi	r20, 0x74	; 116
     ae4:	52 e4       	ldi	r21, 0x42	; 66
     ae6:	c7 01       	movw	r24, r14
     ae8:	b6 01       	movw	r22, r12
     aea:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     aee:	88 23       	and	r24, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <Calculation+0x13e>
     af2:	e7 c0       	rjmp	.+462    	; 0xcc2 <Calculation+0x30c>
     af4:	00 e0       	ldi	r16, 0x00	; 0
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (Final_arr[i]== '/')// Calculate All Division Operations As Second And Edit The Array With New Value And Delete '/'
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4c e3       	ldi	r20, 0x3C	; 60
     b00:	52 e4       	ldi	r21, 0x42	; 66
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     b0a:	81 11       	cpse	r24, r1
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <Calculation+0x19e>
		{
			Final_arr[i-1]=Final_arr[i-1]/Final_arr[i+1];
     b0e:	c8 01       	movw	r24, r16
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	88 0f       	add	r24, r24
     b16:	99 1f       	adc	r25, r25
     b18:	9c 01       	movw	r18, r24
     b1a:	27 55       	subi	r18, 0x57	; 87
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	79 01       	movw	r14, r18
     b20:	fc 01       	movw	r30, r24
     b22:	ef 54       	subi	r30, 0x4F	; 79
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	20 81       	ld	r18, Z
     b28:	31 81       	ldd	r19, Z+1	; 0x01
     b2a:	42 81       	ldd	r20, Z+2	; 0x02
     b2c:	53 81       	ldd	r21, Z+3	; 0x03
     b2e:	d7 01       	movw	r26, r14
     b30:	6d 91       	ld	r22, X+
     b32:	7d 91       	ld	r23, X+
     b34:	8d 91       	ld	r24, X+
     b36:	9c 91       	ld	r25, X
     b38:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__divsf3>
     b3c:	f7 01       	movw	r30, r14
     b3e:	60 83       	st	Z, r22
     b40:	71 83       	std	Z+1, r23	; 0x01
     b42:	82 83       	std	Z+2, r24	; 0x02
     b44:	93 83       	std	Z+3, r25	; 0x03
			delete_node(i);//delete '/' From Array
     b46:	8c 2f       	mov	r24, r28
     b48:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			delete_node(i);//delete 'digit' From Array
     b4c:	8c 2f       	mov	r24, r28
     b4e:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			i=0;
     b52:	c0 e0       	ldi	r28, 0x00	; 0
		}
		i++;
     b54:	cf 5f       	subi	r28, 0xFF	; 255
			i=0;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     b56:	0c 2f       	mov	r16, r28
     b58:	0c 2e       	mov	r0, r28
     b5a:	00 0c       	add	r0, r0
     b5c:	11 0b       	sbc	r17, r17
     b5e:	f8 01       	movw	r30, r16
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e3 55       	subi	r30, 0x53	; 83
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	c0 80       	ld	r12, Z
     b6e:	d1 80       	ldd	r13, Z+1	; 0x01
     b70:	e2 80       	ldd	r14, Z+2	; 0x02
     b72:	f3 80       	ldd	r15, Z+3	; 0x03
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	44 e7       	ldi	r20, 0x74	; 116
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	c7 01       	movw	r24, r14
     b7e:	b6 01       	movw	r22, r12
     b80:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     b84:	81 11       	cpse	r24, r1
     b86:	b9 cf       	rjmp	.-142    	; 0xafa <Calculation+0x144>
			i=0;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     b88:	c0 90 ad 00 	lds	r12, 0x00AD	; 0x8000ad <Final_arr>
     b8c:	d0 90 ae 00 	lds	r13, 0x00AE	; 0x8000ae <Final_arr+0x1>
     b90:	e0 90 af 00 	lds	r14, 0x00AF	; 0x8000af <Final_arr+0x2>
     b94:	f0 90 b0 00 	lds	r15, 0x00B0	; 0x8000b0 <Final_arr+0x3>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	44 e7       	ldi	r20, 0x74	; 116
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	c7 01       	movw	r24, r14
     ba2:	b6 01       	movw	r22, r12
     ba4:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     ba8:	88 23       	and	r24, r24
     baa:	09 f4       	brne	.+2      	; 0xbae <Calculation+0x1f8>
     bac:	8a c0       	rjmp	.+276    	; 0xcc2 <Calculation+0x30c>
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (Final_arr[i]=='+')//// Calculate All Add Operations As 3rd And Edit The Array With New Value And Delete '+'
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4c e2       	ldi	r20, 0x2C	; 44
     bba:	52 e4       	ldi	r21, 0x42	; 66
     bbc:	c7 01       	movw	r24, r14
     bbe:	b6 01       	movw	r22, r12
     bc0:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     bc4:	81 11       	cpse	r24, r1
     bc6:	23 c0       	rjmp	.+70     	; 0xc0e <Calculation+0x258>
		{
			Final_arr[i-1]=Final_arr[i-1]+Final_arr[i+1];
     bc8:	c8 01       	movw	r24, r16
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	9c 01       	movw	r18, r24
     bd4:	27 55       	subi	r18, 0x57	; 87
     bd6:	3f 4f       	sbci	r19, 0xFF	; 255
     bd8:	79 01       	movw	r14, r18
     bda:	fc 01       	movw	r30, r24
     bdc:	ef 54       	subi	r30, 0x4F	; 79
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	d9 01       	movw	r26, r18
     be2:	2d 91       	ld	r18, X+
     be4:	3d 91       	ld	r19, X+
     be6:	4d 91       	ld	r20, X+
     be8:	5c 91       	ld	r21, X
     bea:	60 81       	ld	r22, Z
     bec:	71 81       	ldd	r23, Z+1	; 0x01
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	93 81       	ldd	r25, Z+3	; 0x03
     bf2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__addsf3>
     bf6:	f7 01       	movw	r30, r14
     bf8:	60 83       	st	Z, r22
     bfa:	71 83       	std	Z+1, r23	; 0x01
     bfc:	82 83       	std	Z+2, r24	; 0x02
     bfe:	93 83       	std	Z+3, r25	; 0x03
			delete_node(i);//delete '+' From Array
     c00:	8c 2f       	mov	r24, r28
     c02:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			delete_node(i);//delete 'Digit' From Array
     c06:	8c 2f       	mov	r24, r28
     c08:	0e 94 91 04 	call	0x922	; 0x922 <delete_node>
			i=0;
     c0c:	c0 e0       	ldi	r28, 0x00	; 0
		}
		i++;
     c0e:	cf 5f       	subi	r28, 0xFF	; 255
			i=0;
		}
		i++;
	}
	i=0;
	while(Final_arr[i] != '=')
     c10:	0c 2f       	mov	r16, r28
     c12:	0c 2e       	mov	r0, r28
     c14:	00 0c       	add	r0, r0
     c16:	11 0b       	sbc	r17, r17
     c18:	f8 01       	movw	r30, r16
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	ee 0f       	add	r30, r30
     c20:	ff 1f       	adc	r31, r31
     c22:	e3 55       	subi	r30, 0x53	; 83
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	c0 80       	ld	r12, Z
     c28:	d1 80       	ldd	r13, Z+1	; 0x01
     c2a:	e2 80       	ldd	r14, Z+2	; 0x02
     c2c:	f3 80       	ldd	r15, Z+3	; 0x03
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	44 e7       	ldi	r20, 0x74	; 116
     c34:	52 e4       	ldi	r21, 0x42	; 66
     c36:	c7 01       	movw	r24, r14
     c38:	b6 01       	movw	r22, r12
     c3a:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     c3e:	81 11       	cpse	r24, r1
     c40:	b9 cf       	rjmp	.-142    	; 0xbb4 <Calculation+0x1fe>
		}
		i++;
	}
	i=0;
	
	while(Final_arr[i] != '=')//Finally Summing Up All Digits In Array
     c42:	c0 90 ad 00 	lds	r12, 0x00AD	; 0x8000ad <Final_arr>
     c46:	d0 90 ae 00 	lds	r13, 0x00AE	; 0x8000ae <Final_arr+0x1>
     c4a:	e0 90 af 00 	lds	r14, 0x00AF	; 0x8000af <Final_arr+0x2>
     c4e:	f0 90 b0 00 	lds	r15, 0x00B0	; 0x8000b0 <Final_arr+0x3>
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	44 e7       	ldi	r20, 0x74	; 116
     c58:	52 e4       	ldi	r21, 0x42	; 66
     c5a:	c7 01       	movw	r24, r14
     c5c:	b6 01       	movw	r22, r12
     c5e:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     c62:	88 23       	and	r24, r24
     c64:	71 f1       	breq	.+92     	; 0xcc2 <Calculation+0x30c>
     c66:	80 90 a9 00 	lds	r8, 0x00A9	; 0x8000a9 <Result>
     c6a:	90 90 aa 00 	lds	r9, 0x00AA	; 0x8000aa <Result+0x1>
     c6e:	a0 90 ab 00 	lds	r10, 0x00AB	; 0x8000ab <Result+0x2>
     c72:	b0 90 ac 00 	lds	r11, 0x00AC	; 0x8000ac <Result+0x3>
     c76:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Result+=Final_arr[i];
     c78:	a7 01       	movw	r20, r14
     c7a:	96 01       	movw	r18, r12
     c7c:	c5 01       	movw	r24, r10
     c7e:	b4 01       	movw	r22, r8
     c80:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__addsf3>
     c84:	4b 01       	movw	r8, r22
     c86:	5c 01       	movw	r10, r24
     c88:	cf 5f       	subi	r28, 0xFF	; 255
		}
		i++;
	}
	i=0;
	
	while(Final_arr[i] != '=')//Finally Summing Up All Digits In Array
     c8a:	24 e0       	ldi	r18, 0x04	; 4
     c8c:	c2 02       	muls	r28, r18
     c8e:	f0 01       	movw	r30, r0
     c90:	11 24       	eor	r1, r1
     c92:	e3 55       	subi	r30, 0x53	; 83
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	c0 80       	ld	r12, Z
     c98:	d1 80       	ldd	r13, Z+1	; 0x01
     c9a:	e2 80       	ldd	r14, Z+2	; 0x02
     c9c:	f3 80       	ldd	r15, Z+3	; 0x03
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	44 e7       	ldi	r20, 0x74	; 116
     ca4:	52 e4       	ldi	r21, 0x42	; 66
     ca6:	c7 01       	movw	r24, r14
     ca8:	b6 01       	movw	r22, r12
     caa:	0e 94 df 09 	call	0x13be	; 0x13be <__cmpsf2>
     cae:	81 11       	cpse	r24, r1
     cb0:	e3 cf       	rjmp	.-58     	; 0xc78 <Calculation+0x2c2>
     cb2:	80 92 a9 00 	sts	0x00A9, r8	; 0x8000a9 <Result>
     cb6:	90 92 aa 00 	sts	0x00AA, r9	; 0x8000aa <Result+0x1>
     cba:	a0 92 ab 00 	sts	0x00AB, r10	; 0x8000ab <Result+0x2>
     cbe:	b0 92 ac 00 	sts	0x00AC, r11	; 0x8000ac <Result+0x3>
		Result+=Final_arr[i];
		i++;
	}
	
	
	Flag = Display; // Go TO Display ^_^
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <Flag>
	return;
	
	
}
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	cf 90       	pop	r12
     cd6:	bf 90       	pop	r11
     cd8:	af 90       	pop	r10
     cda:	9f 90       	pop	r9
     cdc:	8f 90       	pop	r8
     cde:	08 95       	ret

00000ce0 <ADC0_init>:
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	87 b9       	out	0x07, r24	; 7
     ce4:	86 b1       	in	r24, 0x06	; 6
     ce6:	87 68       	ori	r24, 0x87	; 135
     ce8:	86 b9       	out	0x06, r24	; 6
     cea:	08 95       	ret

00000cec <ADC0_read>:
     cec:	36 9a       	sbi	0x06, 6	; 6
     cee:	36 99       	sbic	0x06, 6	; 6
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <ADC0_read+0x2>
     cf2:	24 b1       	in	r18, 0x04	; 4
     cf4:	85 b1       	in	r24, 0x05	; 5
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	98 2f       	mov	r25, r24
     cfa:	88 27       	eor	r24, r24
     cfc:	82 0f       	add	r24, r18
     cfe:	91 1d       	adc	r25, r1
     d00:	08 95       	ret

00000d02 <ADC1_init>:
     d02:	81 e4       	ldi	r24, 0x41	; 65
     d04:	87 b9       	out	0x07, r24	; 7
     d06:	86 b1       	in	r24, 0x06	; 6
     d08:	87 68       	ori	r24, 0x87	; 135
     d0a:	86 b9       	out	0x06, r24	; 6
     d0c:	08 95       	ret

00000d0e <ADC1_read>:
     d0e:	36 9a       	sbi	0x06, 6	; 6
     d10:	36 99       	sbic	0x06, 6	; 6
     d12:	fe cf       	rjmp	.-4      	; 0xd10 <ADC1_read+0x2>
     d14:	24 b1       	in	r18, 0x04	; 4
     d16:	85 b1       	in	r24, 0x05	; 5
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	98 2f       	mov	r25, r24
     d1c:	88 27       	eor	r24, r24
     d1e:	82 0f       	add	r24, r18
     d20:	91 1d       	adc	r25, r1
     d22:	08 95       	ret

00000d24 <KeyPad_init>:
const uint8_t keypad_matrix[]={7,4,1,'C',8,5,2,0,9,6,3,'=','/','*','-','+'};
uint8_t i;

void KeyPad_init(void)
{
	KEYPAD_INIT_PORT;	
     d24:	80 ef       	ldi	r24, 0xF0	; 240
     d26:	84 bb       	out	0x14, r24	; 20
     d28:	8f e0       	ldi	r24, 0x0F	; 15
     d2a:	85 bb       	out	0x15, r24	; 21
     d2c:	08 95       	ret

00000d2e <KeyPad_read>:
}

uint8_t KeyPad_read(void)
{
	OUTPUT_PORT = 0b11101111;
     d2e:	8f ee       	ldi	r24, 0xEF	; 239
     d30:	85 bb       	out	0x15, r24	; 21
	for(i=0; i<4;i++){
     d32:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i];
     d36:	98 99       	sbic	0x13, 0	; 19
     d38:	ad c0       	rjmp	.+346    	; 0xe94 <KeyPad_read+0x166>
     d3a:	0c c0       	rjmp	.+24     	; 0xd54 <KeyPad_read+0x26>
     d3c:	83 b3       	in	r24, 0x13	; 19
     d3e:	b9 01       	movw	r22, r18
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <KeyPad_read+0x1c>
     d46:	95 95       	asr	r25
     d48:	87 95       	ror	r24
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <KeyPad_read+0x18>
     d4e:	80 fd       	sbrc	r24, 0
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <KeyPad_read+0x34>
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <KeyPad_read+0x2a>
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	fb 01       	movw	r30, r22
     d5a:	ea 57       	subi	r30, 0x7A	; 122
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	80 81       	ld	r24, Z
     d60:	08 95       	ret
}

uint8_t KeyPad_read(void)
{
	OUTPUT_PORT = 0b11101111;
	for(i=0; i<4;i++){
     d62:	4f 5f       	subi	r20, 0xFF	; 255
     d64:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <i>
     d68:	2f 5f       	subi	r18, 0xFF	; 255
     d6a:	3f 4f       	sbci	r19, 0xFF	; 255
     d6c:	44 30       	cpi	r20, 0x04	; 4
     d6e:	31 f7       	brne	.-52     	; 0xd3c <KeyPad_read+0xe>
     d70:	8f e2       	ldi	r24, 0x2F	; 47
     d72:	95 e7       	ldi	r25, 0x75	; 117
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <KeyPad_read+0x46>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <KeyPad_read+0x4c>
     d7a:	00 00       	nop
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b11011111;
     d7c:	8f ed       	ldi	r24, 0xDF	; 223
     d7e:	85 bb       	out	0x15, r24	; 21
	for(i=0; i<4;i++){
     d80:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+4];
     d84:	98 99       	sbic	0x13, 0	; 19
     d86:	7f c0       	rjmp	.+254    	; 0xe86 <KeyPad_read+0x158>
     d88:	0c c0       	rjmp	.+24     	; 0xda2 <KeyPad_read+0x74>
     d8a:	83 b3       	in	r24, 0x13	; 19
     d8c:	b9 01       	movw	r22, r18
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <KeyPad_read+0x6a>
     d94:	95 95       	asr	r25
     d96:	87 95       	ror	r24
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <KeyPad_read+0x66>
     d9c:	80 fd       	sbrc	r24, 0
     d9e:	08 c0       	rjmp	.+16     	; 0xdb0 <KeyPad_read+0x82>
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <KeyPad_read+0x78>
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	fb 01       	movw	r30, r22
     da8:	ea 57       	subi	r30, 0x7A	; 122
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	84 81       	ldd	r24, Z+4	; 0x04
     dae:	08 95       	ret
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b11011111;
	for(i=0; i<4;i++){
     db0:	4f 5f       	subi	r20, 0xFF	; 255
     db2:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <i>
     db6:	2f 5f       	subi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	44 30       	cpi	r20, 0x04	; 4
     dbc:	31 f7       	brne	.-52     	; 0xd8a <KeyPad_read+0x5c>
     dbe:	8f e2       	ldi	r24, 0x2F	; 47
     dc0:	95 e7       	ldi	r25, 0x75	; 117
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <KeyPad_read+0x94>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <KeyPad_read+0x9a>
     dc8:	00 00       	nop
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+4];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b10111111;
     dca:	8f eb       	ldi	r24, 0xBF	; 191
     dcc:	85 bb       	out	0x15, r24	; 21
	for(i=0; i<4;i++){
     dce:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+8];
     dd2:	98 99       	sbic	0x13, 0	; 19
     dd4:	51 c0       	rjmp	.+162    	; 0xe78 <KeyPad_read+0x14a>
     dd6:	0c c0       	rjmp	.+24     	; 0xdf0 <KeyPad_read+0xc2>
     dd8:	83 b3       	in	r24, 0x13	; 19
     dda:	b9 01       	movw	r22, r18
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <KeyPad_read+0xb8>
     de2:	95 95       	asr	r25
     de4:	87 95       	ror	r24
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <KeyPad_read+0xb4>
     dea:	80 fd       	sbrc	r24, 0
     dec:	08 c0       	rjmp	.+16     	; 0xdfe <KeyPad_read+0xd0>
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <KeyPad_read+0xc6>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	70 e0       	ldi	r23, 0x00	; 0
     df4:	fb 01       	movw	r30, r22
     df6:	ea 57       	subi	r30, 0x7A	; 122
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 85       	ldd	r24, Z+8	; 0x08
     dfc:	08 95       	ret
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+4];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b10111111;
	for(i=0; i<4;i++){
     dfe:	4f 5f       	subi	r20, 0xFF	; 255
     e00:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <i>
     e04:	2f 5f       	subi	r18, 0xFF	; 255
     e06:	3f 4f       	sbci	r19, 0xFF	; 255
     e08:	44 30       	cpi	r20, 0x04	; 4
     e0a:	31 f7       	brne	.-52     	; 0xdd8 <KeyPad_read+0xaa>
     e0c:	8f e2       	ldi	r24, 0x2F	; 47
     e0e:	95 e7       	ldi	r25, 0x75	; 117
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <KeyPad_read+0xe2>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <KeyPad_read+0xe8>
     e16:	00 00       	nop
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+8];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b01111111;
     e18:	8f e7       	ldi	r24, 0x7F	; 127
     e1a:	85 bb       	out	0x15, r24	; 21
	for(i=0; i<4;i++){
     e1c:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <i>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+12];
     e20:	98 99       	sbic	0x13, 0	; 19
     e22:	23 c0       	rjmp	.+70     	; 0xe6a <KeyPad_read+0x13c>
     e24:	0c c0       	rjmp	.+24     	; 0xe3e <KeyPad_read+0x110>
     e26:	83 b3       	in	r24, 0x13	; 19
     e28:	b9 01       	movw	r22, r18
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <KeyPad_read+0x106>
     e30:	95 95       	asr	r25
     e32:	87 95       	ror	r24
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <KeyPad_read+0x102>
     e38:	80 fd       	sbrc	r24, 0
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <KeyPad_read+0x11e>
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <KeyPad_read+0x114>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	fb 01       	movw	r30, r22
     e44:	ea 57       	subi	r30, 0x7A	; 122
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	84 85       	ldd	r24, Z+12	; 0x0c
     e4a:	08 95       	ret
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+8];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b01111111;
	for(i=0; i<4;i++){
     e4c:	4f 5f       	subi	r20, 0xFF	; 255
     e4e:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <i>
     e52:	2f 5f       	subi	r18, 0xFF	; 255
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	44 30       	cpi	r20, 0x04	; 4
     e58:	31 f7       	brne	.-52     	; 0xe26 <KeyPad_read+0xf8>
     e5a:	8f e2       	ldi	r24, 0x2F	; 47
     e5c:	95 e7       	ldi	r25, 0x75	; 117
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <KeyPad_read+0x130>
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <KeyPad_read+0x136>
     e64:	00 00       	nop
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+12];
	}
	_delay_ms(10);
	
	return 0;	//0xff	
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 95       	ret
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+8];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b01111111;
	for(i=0; i<4;i++){
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <i>
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	d7 cf       	rjmp	.-82     	; 0xe26 <KeyPad_read+0xf8>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i+4];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b10111111;
	for(i=0; i<4;i++){
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <i>
     e7e:	21 e0       	ldi	r18, 0x01	; 1
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	41 e0       	ldi	r20, 0x01	; 1
     e84:	a9 cf       	rjmp	.-174    	; 0xdd8 <KeyPad_read+0xaa>
		if(READBIT(INPUT_PORT,i) == 0) return keypad_matrix[i];
	}
	_delay_ms(10);
	
	OUTPUT_PORT = 0b11011111;
	for(i=0; i<4;i++){
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <i>
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	41 e0       	ldi	r20, 0x01	; 1
     e92:	7b cf       	rjmp	.-266    	; 0xd8a <KeyPad_read+0x5c>
}

uint8_t KeyPad_read(void)
{
	OUTPUT_PORT = 0b11101111;
	for(i=0; i<4;i++){
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <i>
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	4d cf       	rjmp	.-358    	; 0xd3c <KeyPad_read+0xe>

00000ea2 <LCD_write_cmd_char>:
			LCD_write_cmd_char(j+48,1);
			LCD_write_cmd_char(i+48,1);
		}
		else
		LCD_write_txt("LONG NUMBER");
}
     ea2:	61 11       	cpse	r22, r1
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <LCD_write_cmd_char+0x8>
     ea6:	c1 98       	cbi	0x18, 1	; 24
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <LCD_write_cmd_char+0xa>
     eaa:	c1 9a       	sbi	0x18, 1	; 24
     eac:	88 23       	and	r24, r24
     eae:	14 f0       	brlt	.+4      	; 0xeb4 <LCD_write_cmd_char+0x12>
     eb0:	df 98       	cbi	0x1b, 7	; 27
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <LCD_write_cmd_char+0x14>
     eb4:	df 9a       	sbi	0x1b, 7	; 27
     eb6:	86 fd       	sbrc	r24, 6
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <LCD_write_cmd_char+0x1c>
     eba:	de 98       	cbi	0x1b, 6	; 27
     ebc:	01 c0       	rjmp	.+2      	; 0xec0 <LCD_write_cmd_char+0x1e>
     ebe:	de 9a       	sbi	0x1b, 6	; 27
     ec0:	85 fd       	sbrc	r24, 5
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <LCD_write_cmd_char+0x26>
     ec4:	dd 98       	cbi	0x1b, 5	; 27
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <LCD_write_cmd_char+0x28>
     ec8:	dd 9a       	sbi	0x1b, 5	; 27
     eca:	84 fd       	sbrc	r24, 4
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <LCD_write_cmd_char+0x30>
     ece:	dc 98       	cbi	0x1b, 4	; 27
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <LCD_write_cmd_char+0x32>
     ed2:	dc 9a       	sbi	0x1b, 4	; 27
     ed4:	c3 9a       	sbi	0x18, 3	; 24
     ed6:	e7 eb       	ldi	r30, 0xB7	; 183
     ed8:	fb e0       	ldi	r31, 0x0B	; 11
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <LCD_write_cmd_char+0x38>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <LCD_write_cmd_char+0x3e>
     ee0:	00 00       	nop
     ee2:	c3 98       	cbi	0x18, 3	; 24
     ee4:	83 fd       	sbrc	r24, 3
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <LCD_write_cmd_char+0x4a>
     ee8:	df 98       	cbi	0x1b, 7	; 27
     eea:	01 c0       	rjmp	.+2      	; 0xeee <LCD_write_cmd_char+0x4c>
     eec:	df 9a       	sbi	0x1b, 7	; 27
     eee:	82 fd       	sbrc	r24, 2
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <LCD_write_cmd_char+0x54>
     ef2:	de 98       	cbi	0x1b, 6	; 27
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <LCD_write_cmd_char+0x56>
     ef6:	de 9a       	sbi	0x1b, 6	; 27
     ef8:	81 fd       	sbrc	r24, 1
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <LCD_write_cmd_char+0x5e>
     efc:	dd 98       	cbi	0x1b, 5	; 27
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <LCD_write_cmd_char+0x60>
     f00:	dd 9a       	sbi	0x1b, 5	; 27
     f02:	80 fd       	sbrc	r24, 0
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <LCD_write_cmd_char+0x68>
     f06:	dc 98       	cbi	0x1b, 4	; 27
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <LCD_write_cmd_char+0x6a>
     f0a:	dc 9a       	sbi	0x1b, 4	; 27
     f0c:	c3 9a       	sbi	0x18, 3	; 24
     f0e:	87 eb       	ldi	r24, 0xB7	; 183
     f10:	9b e0       	ldi	r25, 0x0B	; 11
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <LCD_write_cmd_char+0x70>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <LCD_write_cmd_char+0x76>
     f18:	00 00       	nop
     f1a:	c3 98       	cbi	0x18, 3	; 24
     f1c:	08 95       	ret

00000f1e <LCD_init>:
     f1e:	8a b3       	in	r24, 0x1a	; 26
     f20:	80 6f       	ori	r24, 0xF0	; 240
     f22:	8a bb       	out	0x1a, r24	; 26
     f24:	87 b3       	in	r24, 0x17	; 23
     f26:	8e 60       	ori	r24, 0x0E	; 14
     f28:	87 bb       	out	0x17, r24	; 23
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	88 e2       	ldi	r24, 0x28	; 40
     f36:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	86 e0       	ldi	r24, 0x06	; 6
     f46:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	80 e8       	ldi	r24, 0x80	; 128
     f4e:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	8e e0       	ldi	r24, 0x0E	; 14
     f56:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f5a:	8f e5       	ldi	r24, 0x5F	; 95
     f5c:	9a ee       	ldi	r25, 0xEA	; 234
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <LCD_init+0x40>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <LCD_init+0x46>
     f64:	00 00       	nop
     f66:	08 95       	ret

00000f68 <LCD_write_txt>:
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	fc 01       	movw	r30, r24
     f70:	80 81       	ld	r24, Z
     f72:	88 23       	and	r24, r24
     f74:	61 f0       	breq	.+24     	; 0xf8e <LCD_write_txt+0x26>
     f76:	8f 01       	movw	r16, r30
     f78:	c0 e0       	ldi	r28, 0x00	; 0
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
     f80:	cf 5f       	subi	r28, 0xFF	; 255
     f82:	f8 01       	movw	r30, r16
     f84:	ec 0f       	add	r30, r28
     f86:	f1 1d       	adc	r31, r1
     f88:	80 81       	ld	r24, Z
     f8a:	81 11       	cpse	r24, r1
     f8c:	f6 cf       	rjmp	.-20     	; 0xf7a <LCD_write_txt+0x12>
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <LCD_write_number>:

	
void LCD_write_number(uint16_t num){
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2a 97       	sbiw	r28, 0x0a	; 10
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	f8 94       	cli
     fa8:	de bf       	out	0x3e, r29	; 62
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	cd bf       	out	0x3d, r28	; 61
     fae:	fc 01       	movw	r30, r24
int8_t i=0;
uint8_t txt[10];
while(num!=0)
     fb0:	89 2b       	or	r24, r25
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <LCD_write_number+0x20>
     fb4:	4b c0       	rjmp	.+150    	; 0x104c <LCD_write_number+0xb6>
     fb6:	40 e0       	ldi	r20, 0x00	; 0
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <LCD_write_number+0x26>
{
	txt[i++]=(num%10)+48;
     fba:	45 2f       	mov	r20, r21
     fbc:	51 e0       	ldi	r21, 0x01	; 1
     fbe:	54 0f       	add	r21, r20
     fc0:	01 e0       	ldi	r16, 0x01	; 1
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	0c 0f       	add	r16, r28
     fc6:	1d 1f       	adc	r17, r29
     fc8:	04 0f       	add	r16, r20
     fca:	11 1d       	adc	r17, r1
     fcc:	47 fd       	sbrc	r20, 7
     fce:	1a 95       	dec	r17
     fd0:	9f 01       	movw	r18, r30
     fd2:	ad ec       	ldi	r26, 0xCD	; 205
     fd4:	bc ec       	ldi	r27, 0xCC	; 204
     fd6:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__umulhisi3>
     fda:	96 95       	lsr	r25
     fdc:	87 95       	ror	r24
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	96 95       	lsr	r25
     fe4:	87 95       	ror	r24
     fe6:	9c 01       	movw	r18, r24
     fe8:	22 0f       	add	r18, r18
     fea:	33 1f       	adc	r19, r19
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	9f 01       	movw	r18, r30
     ffe:	28 1b       	sub	r18, r24
    1000:	39 0b       	sbc	r19, r25
    1002:	c9 01       	movw	r24, r18
    1004:	80 5d       	subi	r24, 0xD0	; 208
    1006:	d8 01       	movw	r26, r16
    1008:	8c 93       	st	X, r24
	num/=10;
    100a:	9f 01       	movw	r18, r30
    100c:	ad ec       	ldi	r26, 0xCD	; 205
    100e:	bc ec       	ldi	r27, 0xCC	; 204
    1010:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__umulhisi3>
    1014:	fc 01       	movw	r30, r24
    1016:	f6 95       	lsr	r31
    1018:	e7 95       	ror	r30
    101a:	f6 95       	lsr	r31
    101c:	e7 95       	ror	r30
    101e:	f6 95       	lsr	r31
    1020:	e7 95       	ror	r30

	
void LCD_write_number(uint16_t num){
int8_t i=0;
uint8_t txt[10];
while(num!=0)
    1022:	30 97       	sbiw	r30, 0x00	; 0
    1024:	51 f6       	brne	.-108    	; 0xfba <LCD_write_number+0x24>
{
	txt[i++]=(num%10)+48;
	num/=10;
}
i--;
while(i>=0)
    1026:	44 23       	and	r20, r20
    1028:	8c f0       	brlt	.+34     	; 0x104c <LCD_write_number+0xb6>
    102a:	1f ef       	ldi	r17, 0xFF	; 255
    102c:	14 0f       	add	r17, r20
{
LCD_write_cmd_char(txt[i--],1);
    102e:	e1 e0       	ldi	r30, 0x01	; 1
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	ec 0f       	add	r30, r28
    1034:	fd 1f       	adc	r31, r29
    1036:	e4 0f       	add	r30, r20
    1038:	f1 1d       	adc	r31, r1
    103a:	47 fd       	sbrc	r20, 7
    103c:	fa 95       	dec	r31
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	80 81       	ld	r24, Z
    1042:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
    1046:	41 2f       	mov	r20, r17
{
	txt[i++]=(num%10)+48;
	num/=10;
}
i--;
while(i>=0)
    1048:	11 23       	and	r17, r17
    104a:	7c f7       	brge	.-34     	; 0x102a <LCD_write_number+0x94>
{
LCD_write_cmd_char(txt[i--],1);
}
}
    104c:	2a 96       	adiw	r28, 0x0a	; 10
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	08 95       	ret

00001062 <pwm_ocr1a_init>:
#include "PHASE_C_PWM.h"

void pwm_ocr1a_init()
{
	TCCR1A |= 0b10000011;
    1062:	8f b5       	in	r24, 0x2f	; 47
    1064:	83 68       	ori	r24, 0x83	; 131
    1066:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0b00001001;
    1068:	8e b5       	in	r24, 0x2e	; 46
    106a:	89 60       	ori	r24, 0x09	; 9
    106c:	8e bd       	out	0x2e, r24	; 46
    106e:	08 95       	ret

00001070 <duty_ocr1a_init>:
	
} 
void duty_ocr1a_init(uint8_t data)
{
	OCR1A = (data)*(((float)1023)/((float)100));
    1070:	68 2f       	mov	r22, r24
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
    107c:	24 e1       	ldi	r18, 0x14	; 20
    107e:	3e ea       	ldi	r19, 0xAE	; 174
    1080:	43 e2       	ldi	r20, 0x23	; 35
    1082:	51 e4       	ldi	r21, 0x41	; 65
    1084:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3>
    1088:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    108c:	7b bd       	out	0x2b, r23	; 43
    108e:	6a bd       	out	0x2a, r22	; 42
    1090:	08 95       	ret

00001092 <pwm_ocr1b_init>:
	
}
void pwm_ocr1b_init()
{
	TCCR1A |= 0b00100011;
    1092:	8f b5       	in	r24, 0x2f	; 47
    1094:	83 62       	ori	r24, 0x23	; 35
    1096:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 0b00001001;
    1098:	8e b5       	in	r24, 0x2e	; 46
    109a:	89 60       	ori	r24, 0x09	; 9
    109c:	8e bd       	out	0x2e, r24	; 46
    109e:	08 95       	ret

000010a0 <duty_ocr1b_init>:
	
}
void duty_ocr1b_init(uint8_t data)
{
	OCR1B = (data)*(((float)1023)/((float)100));
    10a0:	68 2f       	mov	r22, r24
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 8e 0a 	call	0x151c	; 0x151c <__floatsisf>
    10ac:	24 e1       	ldi	r18, 0x14	; 20
    10ae:	3e ea       	ldi	r19, 0xAE	; 174
    10b0:	43 e2       	ldi	r20, 0x23	; 35
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 43 0b 	call	0x1686	; 0x1686 <__mulsf3>
    10b8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    10bc:	79 bd       	out	0x29, r23	; 41
    10be:	68 bd       	out	0x28, r22	; 40
    10c0:	08 95       	ret

000010c2 <UART_init>:
    10c2:	54 9a       	sbi	0x0a, 4	; 10
    10c4:	53 9a       	sbi	0x0a, 3	; 10
    10c6:	57 9a       	sbi	0x0a, 7	; 10
    10c8:	56 9a       	sbi	0x0a, 6	; 10
    10ca:	80 e8       	ldi	r24, 0x80	; 128
    10cc:	8f bf       	out	0x3f, r24	; 63
    10ce:	8d e4       	ldi	r24, 0x4D	; 77
    10d0:	89 b9       	out	0x09, r24	; 9
    10d2:	08 95       	ret

000010d4 <main>:
#include "MODES.h"
extern uint8_t switch_Button;

int main(void)
{	
	UART_init();
    10d4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <UART_init>
	pwm_ocr1a_init();
    10d8:	0e 94 31 08 	call	0x1062	; 0x1062 <pwm_ocr1a_init>
	pwm_ocr1b_init();
    10dc:	0e 94 49 08 	call	0x1092	; 0x1092 <pwm_ocr1b_init>
	KeyPad_init();
    10e0:	0e 94 92 06 	call	0xd24	; 0xd24 <KeyPad_init>
	LCD_init();
    10e4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <LCD_init>
	switch_Button=1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <switch_Button>
	MCUCR = 0b10;//Rising Falling Edge
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	85 bf       	out	0x35, r24	; 53
	GICR  = 1<<6;
    10f2:	80 e4       	ldi	r24, 0x40	; 64
    10f4:	8b bf       	out	0x3b, r24	; 59
	SREG  = 1<<7;
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	8f bf       	out	0x3f, r24	; 63
    while (1) 

    {			
			if(switch_Button == ModeA)		{MODE1();}
    10fa:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	11 f4       	brne	.+4      	; 0x1106 <main+0x32>
    1102:	0e 94 a7 08 	call	0x114e	; 0x114e <MODE1>
 	 	    if(switch_Button == ModeB)		{MODE2();}
    1106:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	11 f4       	brne	.+4      	; 0x1112 <main+0x3e>
    110e:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <MODE2>
 	 	    if(switch_Button == ModeC)		{MODE3();}
    1112:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    1116:	83 30       	cpi	r24, 0x03	; 3
    1118:	81 f7       	brne	.-32     	; 0x10fa <main+0x26>
    111a:	0e 94 20 09 	call	0x1240	; 0x1240 <MODE3>
    111e:	ed cf       	rjmp	.-38     	; 0x10fa <main+0x26>

00001120 <__vector_1>:
	}
}

ISR(INT0_vect)
 {	
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	8f 93       	push	r24
	 
	switch_Button++;
    112c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    1130:	8f 5f       	subi	r24, 0xFF	; 255
	if (switch_Button > ModeC )
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	18 f4       	brcc	.+6      	; 0x113c <__vector_1+0x1c>
}

ISR(INT0_vect)
 {	
	 
	switch_Button++;
    1136:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <switch_Button>
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <__vector_1+0x22>
	if (switch_Button > ModeC )
		{
			switch_Button = ModeA ; //if C come A
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <switch_Button>
		}		
    1142:	8f 91       	pop	r24
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <MODE1>:


void MODE1(void)
{

	ADC0_init();
    114e:	0e 94 70 06 	call	0xce0	; 0xce0 <ADC0_init>
	uint16_t  j=0;
	SETBIT(DDRD,PD5);//led
    1152:	8d 9a       	sbi	0x11, 5	; 17
	SETBIT(DDRD,PD4);//Relay
    1154:	8c 9a       	sbi	0x11, 4	; 17
	LCD_write_cmd_char( 0x0c, 0); //turn off Cursor
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	8c e0       	ldi	r24, 0x0C	; 12
    115a:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>

	LCD_write_cmd_char(0x80,0);
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_txt((uint8_t*)"Mode 1");
    1166:	86 e9       	ldi	r24, 0x96	; 150
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	0e 94 b4 07 	call	0xf68	; 0xf68 <LCD_write_txt>
	LCD_write_cmd_char(0xc0,0);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	80 ec       	ldi	r24, 0xC0	; 192
    1172:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_number(ADC0_read());
    1176:	0e 94 76 06 	call	0xcec	; 0xcec <ADC0_read>
    117a:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
	j=ADC0_read();
    117e:	0e 94 76 06 	call	0xcec	; 0xcec <ADC0_read>

	if((j>=100)&&(j<300))
    1182:	9c 01       	movw	r18, r24
    1184:	24 56       	subi	r18, 0x64	; 100
    1186:	31 09       	sbc	r19, r1
    1188:	28 3c       	cpi	r18, 0xC8	; 200
    118a:	31 05       	cpc	r19, r1
    118c:	38 f4       	brcc	.+14     	; 0x119c <MODE1+0x4e>
	{
		duty_ocr1a_init(100);//Led
    118e:	84 e6       	ldi	r24, 0x64	; 100
    1190:	0e 94 38 08 	call	0x1070	; 0x1070 <duty_ocr1a_init>
		duty_ocr1b_init(20);//Buzzer
    1194:	84 e1       	ldi	r24, 0x14	; 20
    1196:	0e 94 50 08 	call	0x10a0	; 0x10a0 <duty_ocr1b_init>
    119a:	08 95       	ret
	}
	else if((j>=300)&&(j<600))
    119c:	9c 01       	movw	r18, r24
    119e:	2c 52       	subi	r18, 0x2C	; 44
    11a0:	31 40       	sbci	r19, 0x01	; 1
    11a2:	2c 32       	cpi	r18, 0x2C	; 44
    11a4:	31 40       	sbci	r19, 0x01	; 1
    11a6:	38 f4       	brcc	.+14     	; 0x11b6 <MODE1+0x68>
	{
		duty_ocr1a_init(70);//Led
    11a8:	86 e4       	ldi	r24, 0x46	; 70
    11aa:	0e 94 38 08 	call	0x1070	; 0x1070 <duty_ocr1a_init>
		duty_ocr1b_init(40);//Buzzer
    11ae:	88 e2       	ldi	r24, 0x28	; 40
    11b0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <duty_ocr1b_init>
    11b4:	08 95       	ret
	}
	else if((j>=600)&&(j<900))
    11b6:	9c 01       	movw	r18, r24
    11b8:	28 55       	subi	r18, 0x58	; 88
    11ba:	32 40       	sbci	r19, 0x02	; 2
    11bc:	2c 32       	cpi	r18, 0x2C	; 44
    11be:	31 40       	sbci	r19, 0x01	; 1
    11c0:	38 f4       	brcc	.+14     	; 0x11d0 <MODE1+0x82>
	{
		duty_ocr1a_init(30);//Led
    11c2:	8e e1       	ldi	r24, 0x1E	; 30
    11c4:	0e 94 38 08 	call	0x1070	; 0x1070 <duty_ocr1a_init>
		duty_ocr1b_init(60);//Buzzer
    11c8:	8c e3       	ldi	r24, 0x3C	; 60
    11ca:	0e 94 50 08 	call	0x10a0	; 0x10a0 <duty_ocr1b_init>
    11ce:	08 95       	ret
	}
	else if(j>=900)
    11d0:	84 38       	cpi	r24, 0x84	; 132
    11d2:	93 40       	sbci	r25, 0x03	; 3
    11d4:	38 f0       	brcs	.+14     	; 0x11e4 <MODE1+0x96>
	{
		duty_ocr1a_init(10);//Led
    11d6:	8a e0       	ldi	r24, 0x0A	; 10
    11d8:	0e 94 38 08 	call	0x1070	; 0x1070 <duty_ocr1a_init>
		duty_ocr1b_init(80);//Buzzer
    11dc:	80 e5       	ldi	r24, 0x50	; 80
    11de:	0e 94 50 08 	call	0x10a0	; 0x10a0 <duty_ocr1b_init>
    11e2:	08 95       	ret
	}
	else
	{
		duty_ocr1a_init(0);//Led
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 38 08 	call	0x1070	; 0x1070 <duty_ocr1a_init>
		duty_ocr1b_init(0);//Buzzer
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 50 08 	call	0x10a0	; 0x10a0 <duty_ocr1b_init>
    11f0:	08 95       	ret

000011f2 <MODE2>:
#include "MODES.h"


void MODE2(void)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
	ADC1_init();
    11f6:	0e 94 81 06 	call	0xd02	; 0xd02 <ADC1_init>
	LCD_write_cmd_char( 0x0c, 0); //turn off Cursor
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	8c e0       	ldi	r24, 0x0C	; 12
    11fe:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	CLRBIT(DDRD,PD5);//Turn off led
    1202:	8d 98       	cbi	0x11, 5	; 17
	CLRBIT(DDRD,PD4);//Turn off Buzzer
    1204:	8c 98       	cbi	0x11, 4	; 17

	SETBIT(DDRD,3);
    1206:	8b 9a       	sbi	0x11, 3	; 17
	uint16_t temp = ADC1_read();
    1208:	0e 94 87 06 	call	0xd0e	; 0xd0e <ADC1_read>
    120c:	ec 01       	movw	r28, r24
	LCD_write_cmd_char(0x80,0);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_txt((uint8_t*)"Mode 2");
    1216:	8d e9       	ldi	r24, 0x9D	; 157
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 b4 07 	call	0xf68	; 0xf68 <LCD_write_txt>
	LCD_write_cmd_char(0xc0,0);
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	80 ec       	ldi	r24, 0xC0	; 192
    1222:	0e 94 51 07 	call	0xea2	; 0xea2 <LCD_write_cmd_char>
	LCD_write_number(ADC1_read());
    1226:	0e 94 87 06 	call	0xd0e	; 0xd0e <ADC1_read>
    122a:	0e 94 cb 07 	call	0xf96	; 0xf96 <LCD_write_number>
	if (temp <= 300)
    122e:	cd 32       	cpi	r28, 0x2D	; 45
    1230:	d1 40       	sbci	r29, 0x01	; 1
    1232:	10 f4       	brcc	.+4      	; 0x1238 <MODE2+0x46>
	{
		SETBIT(PORTD,3); // Relay on
    1234:	93 9a       	sbi	0x12, 3	; 18
    1236:	01 c0       	rjmp	.+2      	; 0x123a <MODE2+0x48>
	}
	else
	{
		CLRBIT(PORTD,3); // Relay Off
    1238:	93 98       	cbi	0x12, 3	; 18
	}
}
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <MODE3>:
#define ModeC 3
uint8_t switch_Button;

void MODE3()
{	
		CLRBIT(PORTD,3);//Turn off Relay
    1240:	93 98       	cbi	0x12, 3	; 18
		ResetData();
    1242:	0e 94 49 00 	call	0x92	; 0x92 <ResetData>
 		while(Flag == Start		&& switch_Button==ModeC)		{ GetData(); }
    1246:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	51 f4       	brne	.+20     	; 0x1262 <MODE3+0x22>
    124e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	71 f5       	brne	.+92     	; 0x12b2 <MODE3+0x72>
    1256:	0e 94 69 00 	call	0xd2	; 0xd2 <GetData>
    125a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	49 f0       	breq	.+18     	; 0x1274 <MODE3+0x34>
 		while(Flag == Analyze	&& switch_Button==ModeC)		{ Analysis(); }
    1262:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	81 f4       	brne	.+32     	; 0x128a <MODE3+0x4a>
    126a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	31 f0       	breq	.+12     	; 0x127e <MODE3+0x3e>
    1272:	08 95       	ret

void MODE3()
{	
		CLRBIT(PORTD,3);//Turn off Relay
		ResetData();
 		while(Flag == Start		&& switch_Button==ModeC)		{ GetData(); }
    1274:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	69 f3       	breq	.-38     	; 0x1256 <MODE3+0x16>
    127c:	1a c0       	rjmp	.+52     	; 0x12b2 <MODE3+0x72>
 		while(Flag == Analyze	&& switch_Button==ModeC)		{ Analysis(); }
    127e:	0e 94 6f 03 	call	0x6de	; 0x6de <Analysis>
    1282:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	49 f0       	breq	.+18     	; 0x129c <MODE3+0x5c>
 		while(Flag == calculate && switch_Button==ModeC)		{ Calculation(); }
    128a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    128e:	83 30       	cpi	r24, 0x03	; 3
    1290:	81 f4       	brne	.+32     	; 0x12b2 <MODE3+0x72>
    1292:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	31 f0       	breq	.+12     	; 0x12a6 <MODE3+0x66>
    129a:	08 95       	ret
void MODE3()
{	
		CLRBIT(PORTD,3);//Turn off Relay
		ResetData();
 		while(Flag == Start		&& switch_Button==ModeC)		{ GetData(); }
 		while(Flag == Analyze	&& switch_Button==ModeC)		{ Analysis(); }
    129c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	69 f3       	breq	.-38     	; 0x127e <MODE3+0x3e>
    12a4:	08 95       	ret
 		while(Flag == calculate && switch_Button==ModeC)		{ Calculation(); }
    12a6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Calculation>
    12aa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	49 f0       	breq	.+18     	; 0x12c4 <MODE3+0x84>
 		while(Flag == Display	&& switch_Button==ModeC)		{ DisplayResult(); }	
    12b2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	a1 f4       	brne	.+40     	; 0x12e2 <MODE3+0xa2>
    12ba:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	31 f0       	breq	.+12     	; 0x12ce <MODE3+0x8e>
    12c2:	08 95       	ret
{	
		CLRBIT(PORTD,3);//Turn off Relay
		ResetData();
 		while(Flag == Start		&& switch_Button==ModeC)		{ GetData(); }
 		while(Flag == Analyze	&& switch_Button==ModeC)		{ Analysis(); }
 		while(Flag == calculate && switch_Button==ModeC)		{ Calculation(); }
    12c4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	69 f3       	breq	.-38     	; 0x12a6 <MODE3+0x66>
    12cc:	08 95       	ret
 		while(Flag == Display	&& switch_Button==ModeC)		{ DisplayResult(); }	
    12ce:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DisplayResult>
    12d2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <Flag>
    12d6:	84 30       	cpi	r24, 0x04	; 4
    12d8:	21 f4       	brne	.+8      	; 0x12e2 <MODE3+0xa2>
    12da:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <switch_Button>
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	b1 f3       	breq	.-20     	; 0x12ce <MODE3+0x8e>
    12e2:	08 95       	ret

000012e4 <__subsf3>:
    12e4:	50 58       	subi	r21, 0x80	; 128

000012e6 <__addsf3>:
    12e6:	bb 27       	eor	r27, r27
    12e8:	aa 27       	eor	r26, r26
    12ea:	0e 94 8a 09 	call	0x1314	; 0x1314 <__addsf3x>
    12ee:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_round>
    12f2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_pscA>
    12f6:	38 f0       	brcs	.+14     	; 0x1306 <__addsf3+0x20>
    12f8:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__fp_pscB>
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__addsf3+0x20>
    12fe:	39 f4       	brne	.+14     	; 0x130e <__addsf3+0x28>
    1300:	9f 3f       	cpi	r25, 0xFF	; 255
    1302:	19 f4       	brne	.+6      	; 0x130a <__addsf3+0x24>
    1304:	26 f4       	brtc	.+8      	; 0x130e <__addsf3+0x28>
    1306:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_nan>
    130a:	0e f4       	brtc	.+2      	; 0x130e <__addsf3+0x28>
    130c:	e0 95       	com	r30
    130e:	e7 fb       	bst	r30, 7
    1310:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_inf>

00001314 <__addsf3x>:
    1314:	e9 2f       	mov	r30, r25
    1316:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_split3>
    131a:	58 f3       	brcs	.-42     	; 0x12f2 <__addsf3+0xc>
    131c:	ba 17       	cp	r27, r26
    131e:	62 07       	cpc	r22, r18
    1320:	73 07       	cpc	r23, r19
    1322:	84 07       	cpc	r24, r20
    1324:	95 07       	cpc	r25, r21
    1326:	20 f0       	brcs	.+8      	; 0x1330 <__addsf3x+0x1c>
    1328:	79 f4       	brne	.+30     	; 0x1348 <__addsf3x+0x34>
    132a:	a6 f5       	brtc	.+104    	; 0x1394 <__addsf3x+0x80>
    132c:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_zero>
    1330:	0e f4       	brtc	.+2      	; 0x1334 <__addsf3x+0x20>
    1332:	e0 95       	com	r30
    1334:	0b 2e       	mov	r0, r27
    1336:	ba 2f       	mov	r27, r26
    1338:	a0 2d       	mov	r26, r0
    133a:	0b 01       	movw	r0, r22
    133c:	b9 01       	movw	r22, r18
    133e:	90 01       	movw	r18, r0
    1340:	0c 01       	movw	r0, r24
    1342:	ca 01       	movw	r24, r20
    1344:	a0 01       	movw	r20, r0
    1346:	11 24       	eor	r1, r1
    1348:	ff 27       	eor	r31, r31
    134a:	59 1b       	sub	r21, r25
    134c:	99 f0       	breq	.+38     	; 0x1374 <__addsf3x+0x60>
    134e:	59 3f       	cpi	r21, 0xF9	; 249
    1350:	50 f4       	brcc	.+20     	; 0x1366 <__addsf3x+0x52>
    1352:	50 3e       	cpi	r21, 0xE0	; 224
    1354:	68 f1       	brcs	.+90     	; 0x13b0 <__addsf3x+0x9c>
    1356:	1a 16       	cp	r1, r26
    1358:	f0 40       	sbci	r31, 0x00	; 0
    135a:	a2 2f       	mov	r26, r18
    135c:	23 2f       	mov	r18, r19
    135e:	34 2f       	mov	r19, r20
    1360:	44 27       	eor	r20, r20
    1362:	58 5f       	subi	r21, 0xF8	; 248
    1364:	f3 cf       	rjmp	.-26     	; 0x134c <__addsf3x+0x38>
    1366:	46 95       	lsr	r20
    1368:	37 95       	ror	r19
    136a:	27 95       	ror	r18
    136c:	a7 95       	ror	r26
    136e:	f0 40       	sbci	r31, 0x00	; 0
    1370:	53 95       	inc	r21
    1372:	c9 f7       	brne	.-14     	; 0x1366 <__addsf3x+0x52>
    1374:	7e f4       	brtc	.+30     	; 0x1394 <__addsf3x+0x80>
    1376:	1f 16       	cp	r1, r31
    1378:	ba 0b       	sbc	r27, r26
    137a:	62 0b       	sbc	r22, r18
    137c:	73 0b       	sbc	r23, r19
    137e:	84 0b       	sbc	r24, r20
    1380:	ba f0       	brmi	.+46     	; 0x13b0 <__addsf3x+0x9c>
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	a1 f0       	breq	.+40     	; 0x13ae <__addsf3x+0x9a>
    1386:	ff 0f       	add	r31, r31
    1388:	bb 1f       	adc	r27, r27
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	c2 f7       	brpl	.-16     	; 0x1382 <__addsf3x+0x6e>
    1392:	0e c0       	rjmp	.+28     	; 0x13b0 <__addsf3x+0x9c>
    1394:	ba 0f       	add	r27, r26
    1396:	62 1f       	adc	r22, r18
    1398:	73 1f       	adc	r23, r19
    139a:	84 1f       	adc	r24, r20
    139c:	48 f4       	brcc	.+18     	; 0x13b0 <__addsf3x+0x9c>
    139e:	87 95       	ror	r24
    13a0:	77 95       	ror	r23
    13a2:	67 95       	ror	r22
    13a4:	b7 95       	ror	r27
    13a6:	f7 95       	ror	r31
    13a8:	9e 3f       	cpi	r25, 0xFE	; 254
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <__addsf3x+0x9a>
    13ac:	b0 cf       	rjmp	.-160    	; 0x130e <__addsf3+0x28>
    13ae:	93 95       	inc	r25
    13b0:	88 0f       	add	r24, r24
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <__addsf3x+0xa2>
    13b4:	99 27       	eor	r25, r25
    13b6:	ee 0f       	add	r30, r30
    13b8:	97 95       	ror	r25
    13ba:	87 95       	ror	r24
    13bc:	08 95       	ret

000013be <__cmpsf2>:
    13be:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fp_cmp>
    13c2:	08 f4       	brcc	.+2      	; 0x13c6 <__cmpsf2+0x8>
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	08 95       	ret

000013c8 <__divsf3>:
    13c8:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <__divsf3x>
    13cc:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_round>
    13d0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__fp_pscB>
    13d4:	58 f0       	brcs	.+22     	; 0x13ec <__divsf3+0x24>
    13d6:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_pscA>
    13da:	40 f0       	brcs	.+16     	; 0x13ec <__divsf3+0x24>
    13dc:	29 f4       	brne	.+10     	; 0x13e8 <__divsf3+0x20>
    13de:	5f 3f       	cpi	r21, 0xFF	; 255
    13e0:	29 f0       	breq	.+10     	; 0x13ec <__divsf3+0x24>
    13e2:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_inf>
    13e6:	51 11       	cpse	r21, r1
    13e8:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_szero>
    13ec:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_nan>

000013f0 <__divsf3x>:
    13f0:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_split3>
    13f4:	68 f3       	brcs	.-38     	; 0x13d0 <__divsf3+0x8>

000013f6 <__divsf3_pse>:
    13f6:	99 23       	and	r25, r25
    13f8:	b1 f3       	breq	.-20     	; 0x13e6 <__divsf3+0x1e>
    13fa:	55 23       	and	r21, r21
    13fc:	91 f3       	breq	.-28     	; 0x13e2 <__divsf3+0x1a>
    13fe:	95 1b       	sub	r25, r21
    1400:	55 0b       	sbc	r21, r21
    1402:	bb 27       	eor	r27, r27
    1404:	aa 27       	eor	r26, r26
    1406:	62 17       	cp	r22, r18
    1408:	73 07       	cpc	r23, r19
    140a:	84 07       	cpc	r24, r20
    140c:	38 f0       	brcs	.+14     	; 0x141c <__divsf3_pse+0x26>
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	44 1f       	adc	r20, r20
    1418:	aa 1f       	adc	r26, r26
    141a:	a9 f3       	breq	.-22     	; 0x1406 <__divsf3_pse+0x10>
    141c:	35 d0       	rcall	.+106    	; 0x1488 <__divsf3_pse+0x92>
    141e:	0e 2e       	mov	r0, r30
    1420:	3a f0       	brmi	.+14     	; 0x1430 <__divsf3_pse+0x3a>
    1422:	e0 e8       	ldi	r30, 0x80	; 128
    1424:	32 d0       	rcall	.+100    	; 0x148a <__divsf3_pse+0x94>
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	50 40       	sbci	r21, 0x00	; 0
    142a:	e6 95       	lsr	r30
    142c:	00 1c       	adc	r0, r0
    142e:	ca f7       	brpl	.-14     	; 0x1422 <__divsf3_pse+0x2c>
    1430:	2b d0       	rcall	.+86     	; 0x1488 <__divsf3_pse+0x92>
    1432:	fe 2f       	mov	r31, r30
    1434:	29 d0       	rcall	.+82     	; 0x1488 <__divsf3_pse+0x92>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	bb 1f       	adc	r27, r27
    143e:	26 17       	cp	r18, r22
    1440:	37 07       	cpc	r19, r23
    1442:	48 07       	cpc	r20, r24
    1444:	ab 07       	cpc	r26, r27
    1446:	b0 e8       	ldi	r27, 0x80	; 128
    1448:	09 f0       	breq	.+2      	; 0x144c <__divsf3_pse+0x56>
    144a:	bb 0b       	sbc	r27, r27
    144c:	80 2d       	mov	r24, r0
    144e:	bf 01       	movw	r22, r30
    1450:	ff 27       	eor	r31, r31
    1452:	93 58       	subi	r25, 0x83	; 131
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	3a f0       	brmi	.+14     	; 0x1466 <__divsf3_pse+0x70>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	78 f0       	brcs	.+30     	; 0x147c <__divsf3_pse+0x86>
    145e:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_inf>
    1462:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_szero>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	e4 f3       	brlt	.-8      	; 0x1462 <__divsf3_pse+0x6c>
    146a:	98 3e       	cpi	r25, 0xE8	; 232
    146c:	d4 f3       	brlt	.-12     	; 0x1462 <__divsf3_pse+0x6c>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	9f 5f       	subi	r25, 0xFF	; 255
    147a:	c9 f7       	brne	.-14     	; 0x146e <__divsf3_pse+0x78>
    147c:	88 0f       	add	r24, r24
    147e:	91 1d       	adc	r25, r1
    1480:	96 95       	lsr	r25
    1482:	87 95       	ror	r24
    1484:	97 f9       	bld	r25, 7
    1486:	08 95       	ret
    1488:	e1 e0       	ldi	r30, 0x01	; 1
    148a:	66 0f       	add	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	bb 1f       	adc	r27, r27
    1492:	62 17       	cp	r22, r18
    1494:	73 07       	cpc	r23, r19
    1496:	84 07       	cpc	r24, r20
    1498:	ba 07       	cpc	r27, r26
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <__divsf3_pse+0xae>
    149c:	62 1b       	sub	r22, r18
    149e:	73 0b       	sbc	r23, r19
    14a0:	84 0b       	sbc	r24, r20
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	ee 1f       	adc	r30, r30
    14a6:	88 f7       	brcc	.-30     	; 0x148a <__divsf3_pse+0x94>
    14a8:	e0 95       	com	r30
    14aa:	08 95       	ret

000014ac <__fixsfsi>:
    14ac:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixunssfsi>
    14b0:	68 94       	set
    14b2:	b1 11       	cpse	r27, r1
    14b4:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_szero>
    14b8:	08 95       	ret

000014ba <__fixunssfsi>:
    14ba:	0e 94 1d 0b 	call	0x163a	; 0x163a <__fp_splitA>
    14be:	88 f0       	brcs	.+34     	; 0x14e2 <__fixunssfsi+0x28>
    14c0:	9f 57       	subi	r25, 0x7F	; 127
    14c2:	98 f0       	brcs	.+38     	; 0x14ea <__fixunssfsi+0x30>
    14c4:	b9 2f       	mov	r27, r25
    14c6:	99 27       	eor	r25, r25
    14c8:	b7 51       	subi	r27, 0x17	; 23
    14ca:	b0 f0       	brcs	.+44     	; 0x14f8 <__fixunssfsi+0x3e>
    14cc:	e1 f0       	breq	.+56     	; 0x1506 <__fixunssfsi+0x4c>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	1a f0       	brmi	.+6      	; 0x14de <__fixunssfsi+0x24>
    14d8:	ba 95       	dec	r27
    14da:	c9 f7       	brne	.-14     	; 0x14ce <__fixunssfsi+0x14>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <__fixunssfsi+0x4c>
    14de:	b1 30       	cpi	r27, 0x01	; 1
    14e0:	91 f0       	breq	.+36     	; 0x1506 <__fixunssfsi+0x4c>
    14e2:	0e 94 37 0b 	call	0x166e	; 0x166e <__fp_zero>
    14e6:	b1 e0       	ldi	r27, 0x01	; 1
    14e8:	08 95       	ret
    14ea:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_zero>
    14ee:	67 2f       	mov	r22, r23
    14f0:	78 2f       	mov	r23, r24
    14f2:	88 27       	eor	r24, r24
    14f4:	b8 5f       	subi	r27, 0xF8	; 248
    14f6:	39 f0       	breq	.+14     	; 0x1506 <__fixunssfsi+0x4c>
    14f8:	b9 3f       	cpi	r27, 0xF9	; 249
    14fa:	cc f3       	brlt	.-14     	; 0x14ee <__fixunssfsi+0x34>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b3 95       	inc	r27
    1504:	d9 f7       	brne	.-10     	; 0x14fc <__fixunssfsi+0x42>
    1506:	3e f4       	brtc	.+14     	; 0x1516 <__fixunssfsi+0x5c>
    1508:	90 95       	com	r25
    150a:	80 95       	com	r24
    150c:	70 95       	com	r23
    150e:	61 95       	neg	r22
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	8f 4f       	sbci	r24, 0xFF	; 255
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	08 95       	ret

00001518 <__floatunsisf>:
    1518:	e8 94       	clt
    151a:	09 c0       	rjmp	.+18     	; 0x152e <__floatsisf+0x12>

0000151c <__floatsisf>:
    151c:	97 fb       	bst	r25, 7
    151e:	3e f4       	brtc	.+14     	; 0x152e <__floatsisf+0x12>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	99 23       	and	r25, r25
    1530:	a9 f0       	breq	.+42     	; 0x155c <__floatsisf+0x40>
    1532:	f9 2f       	mov	r31, r25
    1534:	96 e9       	ldi	r25, 0x96	; 150
    1536:	bb 27       	eor	r27, r27
    1538:	93 95       	inc	r25
    153a:	f6 95       	lsr	r31
    153c:	87 95       	ror	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b7 95       	ror	r27
    1544:	f1 11       	cpse	r31, r1
    1546:	f8 cf       	rjmp	.-16     	; 0x1538 <__floatsisf+0x1c>
    1548:	fa f4       	brpl	.+62     	; 0x1588 <__floatsisf+0x6c>
    154a:	bb 0f       	add	r27, r27
    154c:	11 f4       	brne	.+4      	; 0x1552 <__floatsisf+0x36>
    154e:	60 ff       	sbrs	r22, 0
    1550:	1b c0       	rjmp	.+54     	; 0x1588 <__floatsisf+0x6c>
    1552:	6f 5f       	subi	r22, 0xFF	; 255
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <__floatsisf+0x6c>
    155c:	88 23       	and	r24, r24
    155e:	11 f0       	breq	.+4      	; 0x1564 <__floatsisf+0x48>
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	11 c0       	rjmp	.+34     	; 0x1586 <__floatsisf+0x6a>
    1564:	77 23       	and	r23, r23
    1566:	21 f0       	breq	.+8      	; 0x1570 <__floatsisf+0x54>
    1568:	9e e8       	ldi	r25, 0x8E	; 142
    156a:	87 2f       	mov	r24, r23
    156c:	76 2f       	mov	r23, r22
    156e:	05 c0       	rjmp	.+10     	; 0x157a <__floatsisf+0x5e>
    1570:	66 23       	and	r22, r22
    1572:	71 f0       	breq	.+28     	; 0x1590 <__floatsisf+0x74>
    1574:	96 e8       	ldi	r25, 0x86	; 134
    1576:	86 2f       	mov	r24, r22
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	2a f0       	brmi	.+10     	; 0x1588 <__floatsisf+0x6c>
    157e:	9a 95       	dec	r25
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	da f7       	brpl	.-10     	; 0x157e <__floatsisf+0x62>
    1588:	88 0f       	add	r24, r24
    158a:	96 95       	lsr	r25
    158c:	87 95       	ror	r24
    158e:	97 f9       	bld	r25, 7
    1590:	08 95       	ret

00001592 <__fp_cmp>:
    1592:	99 0f       	add	r25, r25
    1594:	00 08       	sbc	r0, r0
    1596:	55 0f       	add	r21, r21
    1598:	aa 0b       	sbc	r26, r26
    159a:	e0 e8       	ldi	r30, 0x80	; 128
    159c:	fe ef       	ldi	r31, 0xFE	; 254
    159e:	16 16       	cp	r1, r22
    15a0:	17 06       	cpc	r1, r23
    15a2:	e8 07       	cpc	r30, r24
    15a4:	f9 07       	cpc	r31, r25
    15a6:	c0 f0       	brcs	.+48     	; 0x15d8 <__fp_cmp+0x46>
    15a8:	12 16       	cp	r1, r18
    15aa:	13 06       	cpc	r1, r19
    15ac:	e4 07       	cpc	r30, r20
    15ae:	f5 07       	cpc	r31, r21
    15b0:	98 f0       	brcs	.+38     	; 0x15d8 <__fp_cmp+0x46>
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	95 0b       	sbc	r25, r21
    15ba:	39 f4       	brne	.+14     	; 0x15ca <__fp_cmp+0x38>
    15bc:	0a 26       	eor	r0, r26
    15be:	61 f0       	breq	.+24     	; 0x15d8 <__fp_cmp+0x46>
    15c0:	23 2b       	or	r18, r19
    15c2:	24 2b       	or	r18, r20
    15c4:	25 2b       	or	r18, r21
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <__fp_cmp+0x3e>
    15c8:	08 95       	ret
    15ca:	0a 26       	eor	r0, r26
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__fp_cmp+0x3e>
    15ce:	a1 40       	sbci	r26, 0x01	; 1
    15d0:	a6 95       	lsr	r26
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	81 1d       	adc	r24, r1
    15d6:	81 1d       	adc	r24, r1
    15d8:	08 95       	ret

000015da <__fp_inf>:
    15da:	97 f9       	bld	r25, 7
    15dc:	9f 67       	ori	r25, 0x7F	; 127
    15de:	80 e8       	ldi	r24, 0x80	; 128
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	08 95       	ret

000015e6 <__fp_nan>:
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
    15e8:	80 ec       	ldi	r24, 0xC0	; 192
    15ea:	08 95       	ret

000015ec <__fp_pscA>:
    15ec:	00 24       	eor	r0, r0
    15ee:	0a 94       	dec	r0
    15f0:	16 16       	cp	r1, r22
    15f2:	17 06       	cpc	r1, r23
    15f4:	18 06       	cpc	r1, r24
    15f6:	09 06       	cpc	r0, r25
    15f8:	08 95       	ret

000015fa <__fp_pscB>:
    15fa:	00 24       	eor	r0, r0
    15fc:	0a 94       	dec	r0
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	05 06       	cpc	r0, r21
    1606:	08 95       	ret

00001608 <__fp_round>:
    1608:	09 2e       	mov	r0, r25
    160a:	03 94       	inc	r0
    160c:	00 0c       	add	r0, r0
    160e:	11 f4       	brne	.+4      	; 0x1614 <__fp_round+0xc>
    1610:	88 23       	and	r24, r24
    1612:	52 f0       	brmi	.+20     	; 0x1628 <__fp_round+0x20>
    1614:	bb 0f       	add	r27, r27
    1616:	40 f4       	brcc	.+16     	; 0x1628 <__fp_round+0x20>
    1618:	bf 2b       	or	r27, r31
    161a:	11 f4       	brne	.+4      	; 0x1620 <__fp_round+0x18>
    161c:	60 ff       	sbrs	r22, 0
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <__fp_round+0x20>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__fp_split3>:
    162a:	57 fd       	sbrc	r21, 7
    162c:	90 58       	subi	r25, 0x80	; 128
    162e:	44 0f       	add	r20, r20
    1630:	55 1f       	adc	r21, r21
    1632:	59 f0       	breq	.+22     	; 0x164a <__fp_splitA+0x10>
    1634:	5f 3f       	cpi	r21, 0xFF	; 255
    1636:	71 f0       	breq	.+28     	; 0x1654 <__fp_splitA+0x1a>
    1638:	47 95       	ror	r20

0000163a <__fp_splitA>:
    163a:	88 0f       	add	r24, r24
    163c:	97 fb       	bst	r25, 7
    163e:	99 1f       	adc	r25, r25
    1640:	61 f0       	breq	.+24     	; 0x165a <__fp_splitA+0x20>
    1642:	9f 3f       	cpi	r25, 0xFF	; 255
    1644:	79 f0       	breq	.+30     	; 0x1664 <__fp_splitA+0x2a>
    1646:	87 95       	ror	r24
    1648:	08 95       	ret
    164a:	12 16       	cp	r1, r18
    164c:	13 06       	cpc	r1, r19
    164e:	14 06       	cpc	r1, r20
    1650:	55 1f       	adc	r21, r21
    1652:	f2 cf       	rjmp	.-28     	; 0x1638 <__fp_split3+0xe>
    1654:	46 95       	lsr	r20
    1656:	f1 df       	rcall	.-30     	; 0x163a <__fp_splitA>
    1658:	08 c0       	rjmp	.+16     	; 0x166a <__fp_splitA+0x30>
    165a:	16 16       	cp	r1, r22
    165c:	17 06       	cpc	r1, r23
    165e:	18 06       	cpc	r1, r24
    1660:	99 1f       	adc	r25, r25
    1662:	f1 cf       	rjmp	.-30     	; 0x1646 <__fp_splitA+0xc>
    1664:	86 95       	lsr	r24
    1666:	71 05       	cpc	r23, r1
    1668:	61 05       	cpc	r22, r1
    166a:	08 94       	sec
    166c:	08 95       	ret

0000166e <__fp_zero>:
    166e:	e8 94       	clt

00001670 <__fp_szero>:
    1670:	bb 27       	eor	r27, r27
    1672:	66 27       	eor	r22, r22
    1674:	77 27       	eor	r23, r23
    1676:	cb 01       	movw	r24, r22
    1678:	97 f9       	bld	r25, 7
    167a:	08 95       	ret

0000167c <__gesf2>:
    167c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <__fp_cmp>
    1680:	08 f4       	brcc	.+2      	; 0x1684 <__gesf2+0x8>
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__mulsf3>:
    1686:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__mulsf3x>
    168a:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__fp_round>
    168e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__fp_pscA>
    1692:	38 f0       	brcs	.+14     	; 0x16a2 <__mulsf3+0x1c>
    1694:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__fp_pscB>
    1698:	20 f0       	brcs	.+8      	; 0x16a2 <__mulsf3+0x1c>
    169a:	95 23       	and	r25, r21
    169c:	11 f0       	breq	.+4      	; 0x16a2 <__mulsf3+0x1c>
    169e:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_inf>
    16a2:	0c 94 f3 0a 	jmp	0x15e6	; 0x15e6 <__fp_nan>
    16a6:	11 24       	eor	r1, r1
    16a8:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_szero>

000016ac <__mulsf3x>:
    16ac:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_split3>
    16b0:	70 f3       	brcs	.-36     	; 0x168e <__mulsf3+0x8>

000016b2 <__mulsf3_pse>:
    16b2:	95 9f       	mul	r25, r21
    16b4:	c1 f3       	breq	.-16     	; 0x16a6 <__mulsf3+0x20>
    16b6:	95 0f       	add	r25, r21
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	55 1f       	adc	r21, r21
    16bc:	62 9f       	mul	r22, r18
    16be:	f0 01       	movw	r30, r0
    16c0:	72 9f       	mul	r23, r18
    16c2:	bb 27       	eor	r27, r27
    16c4:	f0 0d       	add	r31, r0
    16c6:	b1 1d       	adc	r27, r1
    16c8:	63 9f       	mul	r22, r19
    16ca:	aa 27       	eor	r26, r26
    16cc:	f0 0d       	add	r31, r0
    16ce:	b1 1d       	adc	r27, r1
    16d0:	aa 1f       	adc	r26, r26
    16d2:	64 9f       	mul	r22, r20
    16d4:	66 27       	eor	r22, r22
    16d6:	b0 0d       	add	r27, r0
    16d8:	a1 1d       	adc	r26, r1
    16da:	66 1f       	adc	r22, r22
    16dc:	82 9f       	mul	r24, r18
    16de:	22 27       	eor	r18, r18
    16e0:	b0 0d       	add	r27, r0
    16e2:	a1 1d       	adc	r26, r1
    16e4:	62 1f       	adc	r22, r18
    16e6:	73 9f       	mul	r23, r19
    16e8:	b0 0d       	add	r27, r0
    16ea:	a1 1d       	adc	r26, r1
    16ec:	62 1f       	adc	r22, r18
    16ee:	83 9f       	mul	r24, r19
    16f0:	a0 0d       	add	r26, r0
    16f2:	61 1d       	adc	r22, r1
    16f4:	22 1f       	adc	r18, r18
    16f6:	74 9f       	mul	r23, r20
    16f8:	33 27       	eor	r19, r19
    16fa:	a0 0d       	add	r26, r0
    16fc:	61 1d       	adc	r22, r1
    16fe:	23 1f       	adc	r18, r19
    1700:	84 9f       	mul	r24, r20
    1702:	60 0d       	add	r22, r0
    1704:	21 1d       	adc	r18, r1
    1706:	82 2f       	mov	r24, r18
    1708:	76 2f       	mov	r23, r22
    170a:	6a 2f       	mov	r22, r26
    170c:	11 24       	eor	r1, r1
    170e:	9f 57       	subi	r25, 0x7F	; 127
    1710:	50 40       	sbci	r21, 0x00	; 0
    1712:	9a f0       	brmi	.+38     	; 0x173a <__mulsf3_pse+0x88>
    1714:	f1 f0       	breq	.+60     	; 0x1752 <__mulsf3_pse+0xa0>
    1716:	88 23       	and	r24, r24
    1718:	4a f0       	brmi	.+18     	; 0x172c <__mulsf3_pse+0x7a>
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	bb 1f       	adc	r27, r27
    1720:	66 1f       	adc	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	88 1f       	adc	r24, r24
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	50 40       	sbci	r21, 0x00	; 0
    172a:	a9 f7       	brne	.-22     	; 0x1716 <__mulsf3_pse+0x64>
    172c:	9e 3f       	cpi	r25, 0xFE	; 254
    172e:	51 05       	cpc	r21, r1
    1730:	80 f0       	brcs	.+32     	; 0x1752 <__mulsf3_pse+0xa0>
    1732:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__fp_inf>
    1736:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__fp_szero>
    173a:	5f 3f       	cpi	r21, 0xFF	; 255
    173c:	e4 f3       	brlt	.-8      	; 0x1736 <__mulsf3_pse+0x84>
    173e:	98 3e       	cpi	r25, 0xE8	; 232
    1740:	d4 f3       	brlt	.-12     	; 0x1736 <__mulsf3_pse+0x84>
    1742:	86 95       	lsr	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b7 95       	ror	r27
    174a:	f7 95       	ror	r31
    174c:	e7 95       	ror	r30
    174e:	9f 5f       	subi	r25, 0xFF	; 255
    1750:	c1 f7       	brne	.-16     	; 0x1742 <__mulsf3_pse+0x90>
    1752:	fe 2b       	or	r31, r30
    1754:	88 0f       	add	r24, r24
    1756:	91 1d       	adc	r25, r1
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	97 f9       	bld	r25, 7
    175e:	08 95       	ret

00001760 <__umulhisi3>:
    1760:	a2 9f       	mul	r26, r18
    1762:	b0 01       	movw	r22, r0
    1764:	b3 9f       	mul	r27, r19
    1766:	c0 01       	movw	r24, r0
    1768:	a3 9f       	mul	r26, r19
    176a:	70 0d       	add	r23, r0
    176c:	81 1d       	adc	r24, r1
    176e:	11 24       	eor	r1, r1
    1770:	91 1d       	adc	r25, r1
    1772:	b2 9f       	mul	r27, r18
    1774:	70 0d       	add	r23, r0
    1776:	81 1d       	adc	r24, r1
    1778:	11 24       	eor	r1, r1
    177a:	91 1d       	adc	r25, r1
    177c:	08 95       	ret

0000177e <__mulshisi3>:
    177e:	b7 ff       	sbrs	r27, 7
    1780:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__muluhisi3>

00001784 <__mulohisi3>:
    1784:	0e 94 c7 0b 	call	0x178e	; 0x178e <__muluhisi3>
    1788:	82 1b       	sub	r24, r18
    178a:	93 0b       	sbc	r25, r19
    178c:	08 95       	ret

0000178e <__muluhisi3>:
    178e:	0e 94 b0 0b 	call	0x1760	; 0x1760 <__umulhisi3>
    1792:	a5 9f       	mul	r26, r21
    1794:	90 0d       	add	r25, r0
    1796:	b4 9f       	mul	r27, r20
    1798:	90 0d       	add	r25, r0
    179a:	a4 9f       	mul	r26, r20
    179c:	80 0d       	add	r24, r0
    179e:	91 1d       	adc	r25, r1
    17a0:	11 24       	eor	r1, r1
    17a2:	08 95       	ret

000017a4 <_exit>:
    17a4:	f8 94       	cli

000017a6 <__stop_program>:
    17a6:	ff cf       	rjmp	.-2      	; 0x17a6 <__stop_program>
